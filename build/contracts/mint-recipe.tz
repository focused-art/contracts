{ parameter
    (or (or (pair %create
               (map %recipes
                  nat
                  (map nat
                       (or (or (or (pair %burn
                                      (map %tokens
                                         address
                                         (or (or (unit %any) (pair %range nat nat)) (or (set %set nat) (nat %token_id))))
                                      (nat %amount))
                                   (pair %freeze
                                      (pair (map %tokens
                                               address
                                               (or (or (unit %any) (pair %range nat nat)) (or (set %set nat) (nat %token_id))))
                                            (nat %amount))
                                      timestamp))
                               (or (pair %hold
                                      (map %tokens
                                         address
                                         (or (or (unit %any) (pair %range nat nat)) (or (set %set nat) (nat %token_id))))
                                      (nat %amount))
                                   (mutez %pay)))
                           (pair %transfer
                              (pair (map %tokens
                                       address
                                       (or (or (unit %any) (pair %range nat nat)) (or (set %set nat) (nat %token_id))))
                                    (nat %amount))
                              address))))
               (set %products (pair (pair %token (address %address) (nat %token_id)) (nat %amount)))
               (map %recipients address nat)
               (timestamp %start_time)
               (int %duration)
               (nat %max_mint)
               (nat %max_per_block)
               (nat %max_per_wallet))
            (pair %mint
               (nat %mint_id)
               (nat %recipe_id)
               (map %recipe_steps
                  nat
                  (set (pair (pair %token (address %address) (nat %token_id)) (nat %amount))))
               (nat %mint_amount)
               (option %recipient address)))
        (or %mint_owner_action
           (nat %cancel)
           (or %mint_update_action
              (or (or (pair %pause nat bool) (pair %update_duration nat int))
                  (or (pair %update_max_per_block nat nat) (pair %update_max_per_wallet nat nat)))
              (or (pair %update_recipients nat (map address nat))
                  (pair %update_start_time nat timestamp))))) ;
  storage
    (pair (big_map %metadata string bytes)
          (big_map %mints
             nat
             (pair (address %owner)
                   (bool %paused)
                   (map %recipes
                      nat
                      (map nat
                           (or (or (or (pair %burn
                                          (map %tokens
                                             address
                                             (or (or (unit %any) (pair %range nat nat)) (or (set %set nat) (nat %token_id))))
                                          (nat %amount))
                                       (pair %freeze
                                          (pair (map %tokens
                                                   address
                                                   (or (or (unit %any) (pair %range nat nat)) (or (set %set nat) (nat %token_id))))
                                                (nat %amount))
                                          timestamp))
                                   (or (pair %hold
                                          (map %tokens
                                             address
                                             (or (or (unit %any) (pair %range nat nat)) (or (set %set nat) (nat %token_id))))
                                          (nat %amount))
                                       (mutez %pay)))
                               (pair %transfer
                                  (pair (map %tokens
                                           address
                                           (or (or (unit %any) (pair %range nat nat)) (or (set %set nat) (nat %token_id))))
                                        (nat %amount))
                                  address))))
                   (set %products (pair (pair %token (address %address) (nat %token_id)) (nat %amount)))
                   (map %recipients address nat)
                   (nat %minted)
                   (timestamp %start_time)
                   (int %duration)
                   (nat %max_mint)
                   (nat %max_per_block)
                   (nat %max_per_wallet)))
          (nat %next_mint_id)
          (big_map %ledger
             (pair address nat)
             (pair (nat %minted) (nat %last_block) (nat %block_minted)))) ;
  code { NIL operation ;
         PUSH address "tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU" ;
         LAMBDA
           (pair (pair address nat) address address nat)
           operation
           { UNPAIR 4 ;
             DUP ;
             CAR ;
             CONTRACT %transfer
               (list (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount))))) ;
             IF_NONE { PUSH string "FA_CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
             PUSH mutez 0 ;
             NIL (pair address (list (pair address nat nat))) ;
             NIL (pair address nat nat) ;
             DIG 7 ;
             DIG 5 ;
             CDR ;
             DIG 7 ;
             PAIR 3 ;
             CONS ;
             DIG 4 ;
             PAIR ;
             CONS ;
             TRANSFER_TOKENS } ;
         LAMBDA
           mutez
           nat
           { PUSH mutez 1 ;
             SWAP ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR } ;
         LAMBDA
           (pair address mutez)
           operation
           { UNPAIR ;
             CONTRACT unit ;
             IF_NONE { PUSH string "FA_INVALID_TEZ_DESTINATION" ; FAILWITH } {} ;
             SWAP ;
             UNIT ;
             TRANSFER_TOKENS } ;
         LAMBDA nat mutez { PUSH mutez 1 ; SWAP ; MUL } ;
         LAMBDA
           (pair nat
                 (big_map string bytes)
                 (big_map
                    nat
                    (pair address
                          bool
                          (map nat
                               (map nat
                                    (or (or (or (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat)
                                                (pair (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat) timestamp))
                                            (or (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat) mutez))
                                        (pair (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat) address))))
                          (set (pair (pair address nat) nat))
                          (map address nat)
                          nat
                          timestamp
                          int
                          nat
                          nat
                          nat))
                 nat
                 (big_map (pair address nat) (pair nat nat nat)))
           (pair address
                 bool
                 (map nat
                      (map nat
                           (or (or (or (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat)
                                       (pair (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat) timestamp))
                                   (or (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat) mutez))
                               (pair (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat) address))))
                 (set (pair (pair address nat) nat))
                 (map address nat)
                 nat
                 timestamp
                 int
                 nat
                 nat
                 nat)
           { UNPAIR ;
             SWAP ;
             GET 3 ;
             SWAP ;
             GET ;
             IF_NONE { PUSH string "FA_INVALID_MINT_ID" ; FAILWITH } {} } ;
         LAMBDA
           (pair (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat)
                 (set (pair (pair address nat) nat)))
           unit
           { UNPAIR ;
             PUSH nat 0 ;
             DIG 2 ;
             ITER { DUP 3 ;
                    CAR ;
                    DUP 2 ;
                    CAR ;
                    CAR ;
                    GET ;
                    IF_NONE
                      { PUSH string "FA_INVALID_RECIPE_STEP" ; FAILWITH }
                      { IF_LEFT
                          { IF_LEFT
                              { DROP }
                              { UNPAIR ;
                                SWAP ;
                                DUP 3 ;
                                CAR ;
                                CDR ;
                                COMPARE ;
                                LE ;
                                SWAP ;
                                DUP 3 ;
                                CAR ;
                                CDR ;
                                COMPARE ;
                                GE ;
                                AND ;
                                IF {} { PUSH string "FA_INVALID_RECIPE_STEP" ; FAILWITH } } }
                          { IF_LEFT
                              { DUP 2 ;
                                CAR ;
                                CDR ;
                                MEM ;
                                IF {} { PUSH string "FA_INVALID_RECIPE_STEP" ; FAILWITH } }
                              { DUP 2 ;
                                CAR ;
                                CDR ;
                                COMPARE ;
                                EQ ;
                                IF {} { PUSH string "FA_INVALID_RECIPE_STEP" ; FAILWITH } } } } ;
                    CDR ;
                    ADD } ;
             PUSH string "FA_INVALID_RECIPE_STEP" ;
             DIG 2 ;
             CDR ;
             DIG 2 ;
             COMPARE ;
             EQ ;
             IF { DROP ; UNIT } { FAILWITH } } ;
         DIG 8 ;
         UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { DIG 2 ;
                 DIG 3 ;
                 DIG 4 ;
                 DIG 5 ;
                 DIG 6 ;
                 DIG 7 ;
                 DIG 8 ;
                 DROP 7 ;
                 SWAP ;
                 DUP 2 ;
                 GET 3 ;
                 ITER { PUSH string "FA_SELLER_NOT_FA2_OWNER" ;
                        SENDER ;
                        DUP 3 ;
                        CAR ;
                        CAR ;
                        SWAP ;
                        VIEW "is_owner" bool ;
                        IF_NONE { PUSH bool False } {} ;
                        IF { DROP } { FAILWITH } ;
                        PUSH string "FA_SELF_NOT_FA2_MINTER" ;
                        SELF_ADDRESS ;
                        DIG 2 ;
                        CAR ;
                        CAR ;
                        UNIT ;
                        LEFT unit ;
                        RIGHT (or unit unit) ;
                        DIG 2 ;
                        PAIR ;
                        VIEW "has_role" bool ;
                        IF_NONE { PUSH bool False } {} ;
                        IF { DROP } { FAILWITH } } ;
                 PUSH bool False ;
                 DUP 3 ;
                 CAR ;
                 ITER { CDR ;
                        ITER { CDR ;
                               IF_LEFT
                                 { IF_LEFT
                                     { IF_LEFT { DROP } { DROP } }
                                     { IF_LEFT { DROP } { DROP 2 ; PUSH bool True } } }
                                 { DROP } } } ;
                 EMPTY_MAP address nat ;
                 PUSH bool True ;
                 DIG 2 ;
                 COMPARE ;
                 EQ ;
                 IF { DROP ;
                      PUSH nat 0 ;
                      DUP 3 ;
                      GET 5 ;
                      ITER { CDR ; ADD } ;
                      PUSH string "FA_INVALID_RECIPIENT_PCTS" ;
                      PUSH nat 10000 ;
                      DIG 2 ;
                      COMPARE ;
                      EQ ;
                      IF { DROP } { FAILWITH } ;
                      DUP 2 ;
                      GET 5 }
                    {} ;
                 DUP 2 ;
                 DUP 3 ;
                 GET 3 ;
                 DUP 5 ;
                 GET 14 ;
                 DUP 6 ;
                 GET 13 ;
                 DUP 7 ;
                 GET 11 ;
                 DUP 8 ;
                 GET 9 ;
                 DUP 9 ;
                 GET 7 ;
                 PUSH nat 0 ;
                 DIG 8 ;
                 DUP 11 ;
                 GET 3 ;
                 DIG 11 ;
                 CAR ;
                 PUSH bool False ;
                 SENDER ;
                 PAIR 11 ;
                 DIG 3 ;
                 GET 5 ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 UPDATE 3 ;
                 DUP ;
                 PUSH nat 1 ;
                 DIG 2 ;
                 GET 5 ;
                 ADD ;
                 UPDATE 5 }
               { DIG 9 ;
                 DROP ;
                 SWAP ;
                 DUP 2 ;
                 GET 8 ;
                 IF_NONE { SENDER } {} ;
                 DUP 2 ;
                 DUP 4 ;
                 CAR ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 PUSH bool False ;
                 DUP 2 ;
                 GET 3 ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "FA_MINT_PAUSED" ; FAILWITH } ;
                 PUSH string "FA_MINT_NOT_STARTED" ;
                 DUP 2 ;
                 GET 13 ;
                 NOW ;
                 COMPARE ;
                 GE ;
                 IF { DROP } { FAILWITH } ;
                 PUSH int 0 ;
                 DUP 2 ;
                 GET 15 ;
                 COMPARE ;
                 GT ;
                 IF { PUSH string "FA_MINT_ENDED" ;
                      DUP 2 ;
                      GET 15 ;
                      DUP 3 ;
                      GET 13 ;
                      ADD ;
                      NOW ;
                      COMPARE ;
                      LT ;
                      IF { DROP } { FAILWITH } }
                    {} ;
                 DUP ;
                 GET 17 ;
                 DUP 5 ;
                 GET 7 ;
                 DUP 3 ;
                 GET 11 ;
                 ADD ;
                 COMPARE ;
                 GT ;
                 PUSH nat 0 ;
                 DUP 3 ;
                 GET 17 ;
                 COMPARE ;
                 GT ;
                 AND ;
                 IF { PUSH string "FA_MAX_MINT_EXCEEDED" ; FAILWITH } {} ;
                 DUP 3 ;
                 DUP 5 ;
                 CAR ;
                 SENDER ;
                 PAIR ;
                 SWAP ;
                 GET 6 ;
                 SWAP ;
                 GET ;
                 IF_NONE { PUSH nat 0 ; PUSH nat 0 ; PUSH nat 0 ; PAIR 3 } {} ;
                 DUP 2 ;
                 GET 20 ;
                 DUP 6 ;
                 GET 7 ;
                 DUP 3 ;
                 CAR ;
                 ADD ;
                 COMPARE ;
                 GT ;
                 PUSH nat 0 ;
                 DUP 4 ;
                 GET 20 ;
                 COMPARE ;
                 GT ;
                 AND ;
                 IF { PUSH string "FA_MAX_MINT_PER_WALLET_EXCEEDED" ; FAILWITH } {} ;
                 LEVEL ;
                 DUP 2 ;
                 GET 3 ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH nat 0 ; UPDATE 4 ; LEVEL ; UPDATE 3 } {} ;
                 DUP 2 ;
                 GET 19 ;
                 DUP 6 ;
                 GET 7 ;
                 DUP 3 ;
                 GET 4 ;
                 ADD ;
                 COMPARE ;
                 GT ;
                 PUSH nat 0 ;
                 DUP 4 ;
                 GET 19 ;
                 COMPARE ;
                 GT ;
                 AND ;
                 IF { PUSH string "FA_MAX_MINT_PER_BLOCK_EXCEEDED" ; FAILWITH } {} ;
                 NIL operation ;
                 DUP 3 ;
                 GET 5 ;
                 DUP 7 ;
                 GET 3 ;
                 GET ;
                 IF_NONE { PUSH string "FA_INVALID_RECIPE_ID" ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 SWAP ;
                 ITER { UNPAIR ;
                        DUP 9 ;
                        GET 5 ;
                        SWAP ;
                        GET ;
                        IF_NONE { EMPTY_SET (pair (pair address nat) nat) } {} ;
                        SWAP ;
                        IF_LEFT
                          { IF_LEFT
                              { IF_LEFT
                                  { DUP 2 ;
                                    SWAP ;
                                    PAIR ;
                                    DUP 10 ;
                                    SWAP ;
                                    EXEC ;
                                    DROP ;
                                    ITER { DIG 2 ;
                                           DUP 8 ;
                                           GET 7 ;
                                           DUP 3 ;
                                           CDR ;
                                           MUL ;
                                           SENDER ;
                                           DIG 3 ;
                                           CAR ;
                                           DUP ;
                                           CAR ;
                                           CONTRACT %burn (pair (address %owner) (nat %token_id) (nat %amount)) ;
                                           IF_NONE
                                             { DIG 2 ; DUP 16 ; DIG 3 ; DIG 3 ; PAIR 4 ; DUP 13 ; SWAP ; EXEC }
                                             { PUSH mutez 0 ; DIG 4 ; DIG 3 ; CDR ; DIG 4 ; PAIR 3 ; TRANSFER_TOKENS } ;
                                           CONS ;
                                           SWAP } }
                                  { UNPAIR ;
                                    DUP 3 ;
                                    SWAP ;
                                    PAIR ;
                                    DUP 11 ;
                                    SWAP ;
                                    EXEC ;
                                    DROP ;
                                    SWAP ;
                                    ITER { DIG 3 ;
                                           DUP 3 ;
                                           DUP 10 ;
                                           GET 7 ;
                                           DUP 4 ;
                                           CDR ;
                                           MUL ;
                                           SENDER ;
                                           DIG 4 ;
                                           CAR ;
                                           DIG 3 ;
                                           DROP ;
                                           DIG 2 ;
                                           DUP 17 ;
                                           DIG 3 ;
                                           DIG 3 ;
                                           PAIR 4 ;
                                           DUP 14 ;
                                           SWAP ;
                                           EXEC ;
                                           CONS ;
                                           DUG 2 } ;
                                    DROP } }
                              { IF_LEFT
                                  { DROP 2 }
                                  { PUSH nat 0 ;
                                    DIG 2 ;
                                    SIZE ;
                                    COMPARE ;
                                    EQ ;
                                    IF {} { PUSH string "FA_INVALID_RECIPE_STEP" ; FAILWITH } ;
                                    DUP 8 ;
                                    GET 7 ;
                                    SWAP ;
                                    MUL ;
                                    ADD } } }
                          { UNPAIR ;
                            DUP 3 ;
                            SWAP ;
                            PAIR ;
                            DUP 11 ;
                            SWAP ;
                            EXEC ;
                            DROP ;
                            SWAP ;
                            ITER { DIG 3 ;
                                   DUP 9 ;
                                   GET 7 ;
                                   DUP 3 ;
                                   CDR ;
                                   MUL ;
                                   DUP 4 ;
                                   SENDER ;
                                   DIG 4 ;
                                   CAR ;
                                   PAIR 4 ;
                                   DUP 14 ;
                                   SWAP ;
                                   EXEC ;
                                   CONS ;
                                   DUG 2 } ;
                            DROP } } ;
                 DIG 7 ;
                 DIG 11 ;
                 DIG 12 ;
                 DROP 3 ;
                 PUSH string "FA_INVALID_TEZ_AMOUNT" ;
                 DUP 2 ;
                 AMOUNT ;
                 COMPARE ;
                 EQ ;
                 IF { DROP } { FAILWITH } ;
                 DUP 4 ;
                 GET 7 ;
                 SIZE ;
                 SWAP ;
                 DUP 11 ;
                 SWAP ;
                 EXEC ;
                 INT ;
                 EDIV ;
                 IF_NONE
                   { PUSH nat 0 ; PUSH mutez 0 }
                   { UNPAIR ; ABS ; DUP 9 ; SWAP ; EXEC } ;
                 SWAP ;
                 DUP 5 ;
                 GET 7 ;
                 ITER { DIG 3 ;
                        DUP 9 ;
                        GET 7 ;
                        DUP 3 ;
                        CDR ;
                        MUL ;
                        DUP 8 ;
                        DUP 4 ;
                        CAR ;
                        DUP ;
                        CAR ;
                        CONTRACT %mint (pair (address %owner) (nat %token_id) (nat %amount)) ;
                        IF_NONE
                          { DROP 3 ; PUSH string "FA_MINT_ENTRYPOINT_UNDEFINED" ; FAILWITH }
                          { PUSH mutez 0 ; DIG 4 ; DIG 3 ; CDR ; DIG 4 ; PAIR 3 ; TRANSFER_TOKENS } ;
                        CONS ;
                        DUG 3 ;
                        PUSH nat 0 ;
                        DUP 3 ;
                        COMPARE ;
                        GT ;
                        PUSH mutez 0 ;
                        DUP 5 ;
                        COMPARE ;
                        GT ;
                        OR ;
                        IF { DUP 3 ;
                             PUSH nat 0 ;
                             DUP 4 ;
                             COMPARE ;
                             GT ;
                             IF { PUSH mutez 1 ;
                                  ADD ;
                                  PUSH nat 1 ;
                                  DIG 3 ;
                                  SUB ;
                                  ISNAT ;
                                  IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                                  DUG 2 }
                                {} ;
                             DIG 4 ;
                             SWAP ;
                             DUP 7 ;
                             GET 9 ;
                             DIG 3 ;
                             CAR ;
                             DIG 3 ;
                             DIG 3 ;
                             PUSH mutez 0 ;
                             DUP 2 ;
                             COMPARE ;
                             GT ;
                             IF { DUP ;
                                  DUP 15 ;
                                  SWAP ;
                                  EXEC ;
                                  DIG 3 ;
                                  DUP ;
                                  CAR ;
                                  SWAP ;
                                  CDR ;
                                  VIEW "get_royalties" (pair (nat %total_shares) (map %shares address nat)) ;
                                  IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                                  SWAP ;
                                  PAIR ;
                                  constant "expru2hTf7Qe5QVb7UWdLKVedax3Snw3NyewjDX3aQYUQfD9xCR6YY" ;
                                  PUSH mutez 0 ;
                                  SWAP ;
                                  ITER { UNPAIR ;
                                         PUSH mutez 0 ;
                                         DUP 5 ;
                                         COMPARE ;
                                         GT ;
                                         PUSH nat 0 ;
                                         DUP 4 ;
                                         COMPARE ;
                                         GT ;
                                         AND ;
                                         IF { SWAP ;
                                              DUP 14 ;
                                              SWAP ;
                                              EXEC ;
                                              DIG 4 ;
                                              DUP 2 ;
                                              DIG 3 ;
                                              PAIR ;
                                              DUP 15 ;
                                              SWAP ;
                                              EXEC ;
                                              CONS ;
                                              DUG 3 ;
                                              ADD }
                                            { DROP 2 } } ;
                                  PUSH string "FA_INVALID_ROYALTIES" ;
                                  DUP 2 ;
                                  DUP 4 ;
                                  COMPARE ;
                                  GE ;
                                  IF { DROP } { FAILWITH } ;
                                  PUSH mutez 0 ;
                                  DUP 2 ;
                                  COMPARE ;
                                  GT ;
                                  IF { SWAP ;
                                       SUB_MUTEZ ;
                                       IF_NONE { PUSH string "option is None" ; FAILWITH } {} }
                                     { DROP } ;
                                  PUSH mutez 0 ;
                                  DUP 2 ;
                                  COMPARE ;
                                  GT ;
                                  IF { PUSH nat 1 ;
                                       DUP 4 ;
                                       ITER { UNPAIR ;
                                              PUSH mutez 0 ;
                                              DUP 5 ;
                                              COMPARE ;
                                              GT ;
                                              IF { DUP 6 ;
                                                   SIZE ;
                                                   DUP 4 ;
                                                   COMPARE ;
                                                   EQ ;
                                                   IF { SWAP ; DROP ; DUP 3 }
                                                      { PUSH nat 10000 ;
                                                        DIG 2 ;
                                                        DUP 5 ;
                                                        MUL ;
                                                        EDIV ;
                                                        IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                                                        CAR } ;
                                                   PUSH mutez 0 ;
                                                   DUP 2 ;
                                                   COMPARE ;
                                                   GT ;
                                                   IF { DUP 4 ;
                                                        DUP 2 ;
                                                        DUP 2 ;
                                                        COMPARE ;
                                                        LT ;
                                                        IF { SWAP ; DROP } { DROP } ;
                                                        DIG 4 ;
                                                        DUP 2 ;
                                                        DIG 3 ;
                                                        PAIR ;
                                                        DUP 15 ;
                                                        SWAP ;
                                                        EXEC ;
                                                        CONS ;
                                                        DUG 3 ;
                                                        DIG 2 ;
                                                        SUB_MUTEZ ;
                                                        IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                                                        SWAP }
                                                      { DROP 2 } }
                                                 { DROP 2 } ;
                                              PUSH nat 1 ;
                                              ADD } ;
                                       SWAP ;
                                       DIG 3 ;
                                       DROP 3 }
                                     { DIG 2 ; DROP 2 } }
                                { DIG 2 ; DIG 3 ; DROP 3 } ;
                             DUG 2 }
                           { DROP } } ;
                 SWAP ;
                 DIG 5 ;
                 DIG 8 ;
                 DIG 9 ;
                 DIG 10 ;
                 DROP 6 ;
                 DUP 2 ;
                 DUP 6 ;
                 GET 7 ;
                 DIG 3 ;
                 CAR ;
                 ADD ;
                 UPDATE 1 ;
                 SWAP ;
                 DUP 2 ;
                 DUP 6 ;
                 GET 7 ;
                 DIG 3 ;
                 GET 4 ;
                 ADD ;
                 UPDATE 4 ;
                 SWAP ;
                 DUP 4 ;
                 DIG 4 ;
                 GET 6 ;
                 DIG 3 ;
                 SOME ;
                 DUP 6 ;
                 CAR ;
                 SENDER ;
                 PAIR ;
                 UPDATE ;
                 UPDATE 6 ;
                 DUG 2 ;
                 DUP 3 ;
                 DIG 3 ;
                 GET 3 ;
                 DUP 4 ;
                 DUP 6 ;
                 GET 7 ;
                 DIG 5 ;
                 GET 11 ;
                 ADD ;
                 UPDATE 11 ;
                 SOME ;
                 DIG 4 ;
                 CAR ;
                 UPDATE ;
                 UPDATE 3 } }
           { DIG 2 ;
             DIG 4 ;
             DIG 5 ;
             DIG 6 ;
             DIG 7 ;
             DIG 8 ;
             DROP 6 ;
             SWAP ;
             DUP 2 ;
             IF_LEFT
               {}
               { IF_LEFT
                   { IF_LEFT
                       { IF_LEFT { CAR } { CAR } }
                       { IF_LEFT { CAR } { CAR } } }
                   { IF_LEFT { CAR } { CAR } } } ;
             PUSH string "FA_INVALID_MINT_OWNER_ACCESS" ;
             DUP 3 ;
             SENDER ;
             DUP 4 ;
             LAMBDA
               (pair (pair nat address)
                     (pair (big_map string bytes)
                           (big_map
                              nat
                              (pair address
                                    bool
                                    (map nat
                                         (map nat
                                              (or (or (or (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat)
                                                          (pair (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat) timestamp))
                                                      (or (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat) mutez))
                                                  (pair (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat) address))))
                                    (set (pair (pair address nat) nat))
                                    (map address nat)
                                    nat
                                    timestamp
                                    int
                                    nat
                                    nat
                                    nat))
                           nat
                           (big_map (pair address nat) (pair nat nat nat))))
               bool
               { UNPAIR ;
                 UNPAIR ;
                 DIG 2 ;
                 GET 3 ;
                 SWAP ;
                 GET ;
                 IF_NONE { DROP ; PUSH bool False } { CAR ; COMPARE ; EQ } } ;
             DUP 3 ;
             DUP 3 ;
             PAIR ;
             APPLY ;
             SWAP ;
             DIG 2 ;
             DROP 2 ;
             SWAP ;
             EXEC ;
             IF { DROP } { FAILWITH } ;
             DUP 2 ;
             DUP 2 ;
             PAIR ;
             DIG 4 ;
             SWAP ;
             EXEC ;
             DUP 3 ;
             DIG 3 ;
             GET 3 ;
             DIG 4 ;
             IF_LEFT
               { DIG 3 ;
                 DROP 2 ;
                 NONE (pair address
                            bool
                            (map nat
                                 (map nat
                                      (or (or (or (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat)
                                                  (pair (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat) timestamp))
                                              (or (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat) mutez))
                                          (pair (pair (map address (or (or unit (pair nat nat)) (or (set nat) nat))) nat) address))))
                            (set (pair (pair address nat) nat))
                            (map address nat)
                            nat
                            timestamp
                            int
                            nat
                            nat
                            nat) }
               { IF_LEFT
                   { IF_LEFT
                       { IF_LEFT
                           { DIG 3 ; SWAP ; CDR ; UPDATE 3 }
                           { DIG 3 ; SWAP ; CDR ; UPDATE 15 } }
                       { IF_LEFT
                           { DIG 3 ; SWAP ; CDR ; UPDATE 19 }
                           { DIG 3 ; SWAP ; CDR ; UPDATE 20 } } }
                   { IF_LEFT
                       { DIG 3 ; SWAP ; CDR ; UPDATE 9 }
                       { DIG 3 ; SWAP ; CDR ; UPDATE 13 } } ;
                 SOME } ;
             DIG 3 ;
             UPDATE ;
             UPDATE 3 } ;
         SWAP ;
         PAIR } ;
  view "get_mint_owner"
       nat
       address
       { UNPAIR ;
         SWAP ;
         GET 3 ;
         SWAP ;
         GET ;
         IF_NONE { PUSH string "FA_INVALID_MINT_ID" ; FAILWITH } { CAR } } ;
  view "is_mint_owner"
       (pair nat address)
       bool
       { UNPAIR ;
         UNPAIR ;
         DIG 2 ;
         GET 3 ;
         SWAP ;
         GET ;
         IF_NONE { DROP ; PUSH bool False } { CAR ; COMPARE ; EQ } } ;
  view "get_mint_start_time"
       nat
       timestamp
       { UNPAIR ;
         SWAP ;
         GET 3 ;
         SWAP ;
         GET ;
         IF_NONE { PUSH string "FA_INVALID_MINT_ID" ; FAILWITH } { GET 13 } } ;
  view "get_mint_duration"
       nat
       int
       { UNPAIR ;
         SWAP ;
         GET 3 ;
         SWAP ;
         GET ;
         IF_NONE { PUSH string "FA_INVALID_MINT_ID" ; FAILWITH } { GET 15 } } ;
  view "get_num_minted"
       nat
       nat
       { UNPAIR ;
         SWAP ;
         GET 3 ;
         SWAP ;
         GET ;
         IF_NONE { PUSH string "FA_INVALID_MINT_ID" ; FAILWITH } { GET 11 } } }

