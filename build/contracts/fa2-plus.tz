{ parameter
    (or (or (or (or (or %assets
                       (or (list %assert_balances (pair (address %owner) (nat %token_id) (nat %balance)))
                           (pair %balance_of
                              (list %requests (pair (address %owner) (nat %token_id)))
                              (contract %callback
                                 (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))))
                       (or (list %transfer
                              (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount)))))
                           (list %update_operators
                              (or (pair %add_operator (address %owner) (address %operator) (nat %token_id))
                                  (pair %remove_operator (address %owner) (address %operator) (nat %token_id))))))
                    (pair %burn (address %owner) (nat %token_id) (nat %amount)))
                (or (unit %confirm_ownership)
                    (pair %create
                       (pair %token_metadata (nat %token_id) (map %token_info string bytes))
                       (pair %royalties (nat %total_shares) (map %shares address nat)))))
            (or (or (list %internal_transfer_hook
                       (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount)))))
                    (pair %mint (address %owner) (nat %token_id) (nat %amount)))
                (or (list %renounce_roles
                       (or (or (or (unit %renounce_creator) (unit %renounce_metadata_manager))
                               (or (unit %renounce_minter) (unit %renounce_ownership)))
                           (unit %renounce_royalties_manager)))
                    (address %transfer_ownership))))
        (or (or (or (pair %update_default_royalties (nat %total_shares) (map %shares address nat))
                    (list %update_hooks
                       (or (or (or (or (address %add_burn_hook) (address %add_create_hook))
                                   (or (address %add_mint_hook) (address %add_transfer_hook)))
                               (or (or (address %add_update_metadata_hook) (address %remove_burn_hook))
                                   (or (address %remove_create_hook) (address %remove_mint_hook))))
                           (or (address %remove_transfer_hook) (address %remove_update_metadata_hook)))))
                (or (map %update_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
                    (list %update_roles
                       (or (or (or (address %add_creator) (address %add_metadata_manager))
                               (or (address %add_minter) (address %add_royalties_manager)))
                           (or (or (address %remove_creator) (address %remove_metadata_manager))
                               (or (address %remove_minter) (address %remove_royalties_manager)))))))
            (map %update_royalties nat (pair (nat %total_shares) (map %shares address nat))))) ;
  storage
    (pair (big_map %metadata string bytes)
          (pair %roles
             (address %owner)
             (option %pending_owner address)
             (set %creator address)
             (set %minter address)
             (set %metadata_manager address)
             (set %royalties_manager address))
          (pair %hooks
             (set %transfer address)
             (set %create address)
             (set %mint address)
             (set %burn address)
             (set %update_metadata address))
          (pair %assets
             (nat %next_token_id)
             (big_map %token_total_supply nat nat)
             (big_map %ledger (pair address nat) nat)
             (big_map %operators (pair address address nat) unit)
             (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
             (big_map %royalties nat (pair (nat %total_shares) (map %shares address nat))))
          (pair %default_royalties (nat %total_shares) (map %shares address nat))) ;
  code { NIL operation ;
         LAMBDA
           (pair nat
                 nat
                 (big_map nat nat)
                 (big_map (pair address nat) nat)
                 (big_map (pair address address nat) unit)
                 (big_map nat (pair nat (map string bytes)))
                 (big_map nat (pair nat (map address nat))))
           nat
           { UNPAIR ; SWAP ; GET 3 ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
         LAMBDA
           (pair (pair address nat)
                 nat
                 (big_map nat nat)
                 (big_map (pair address nat) nat)
                 (big_map (pair address address nat) unit)
                 (big_map nat (pair nat (map string bytes)))
                 (big_map nat (pair nat (map address nat))))
           nat
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             GET 5 ;
             DUG 2 ;
             PAIR ;
             GET ;
             IF_NONE { PUSH nat 0 } {} } ;
         LAMBDA
           (pair nat
                 nat
                 (big_map nat nat)
                 (big_map (pair address nat) nat)
                 (big_map (pair address address nat) unit)
                 (big_map nat (pair nat (map string bytes)))
                 (big_map nat (pair nat (map address nat))))
           unit
           { UNPAIR ;
             SWAP ;
             CAR ;
             SWAP ;
             COMPARE ;
             LT ;
             IF { UNIT } { PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH } } ;
         LAMBDA
           address
           (contract (list (pair address (list (pair address nat nat)))))
           { CONTRACT %transfer_hook
               (list (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount))))) ;
             IF_NONE { PUSH string "FA_TRANSFER_HOOK_UNDEFINED" ; FAILWITH } {} } ;
         LAMBDA
           address
           (contract (pair (pair nat (map string bytes)) (pair nat (map address nat))))
           { CONTRACT %create_hook
               (pair (pair %token_metadata (nat %token_id) (map %token_info string bytes))
                     (pair %royalties (nat %total_shares) (map %shares address nat))) ;
             IF_NONE { PUSH string "FA_CREATE_HOOK_UNDEFINED" ; FAILWITH } {} } ;
         LAMBDA
           address
           (contract (pair address nat nat))
           { CONTRACT %burn_hook (pair (address %owner) (nat %token_id) (nat %amount)) ;
             IF_NONE { PUSH string "FA_BURN_HOOK_UNDEFINED" ; FAILWITH } {} } ;
         LAMBDA
           address
           (contract (pair address nat nat))
           { CONTRACT %mint_hook (pair (address %owner) (nat %token_id) (nat %amount)) ;
             IF_NONE { PUSH string "FA_MINT_HOOK_UNDEFINED" ; FAILWITH } {} } ;
         LAMBDA
           address
           (contract (map nat (pair nat (map string bytes))))
           { CONTRACT %update_metadata_hook
               (map nat (pair (nat %token_id) (map %token_info string bytes))) ;
             IF_NONE { PUSH string "FA_UPDATE_METADATA_HOOK_UNDEFINED" ; FAILWITH } {} } ;
         LAMBDA
           (pair address
                 (big_map string bytes)
                 (pair address (option address) (set address) (set address) (set address) (set address))
                 (pair (set address) (set address) (set address) (set address) (set address))
                 (pair nat
                       (big_map nat nat)
                       (big_map (pair address nat) nat)
                       (big_map (pair address address nat) unit)
                       (big_map nat (pair nat (map string bytes)))
                       (big_map nat (pair nat (map address nat))))
                 (pair nat (map address nat)))
           bool
           { UNPAIR ; SWAP ; GET 3 ; CAR ; SWAP ; COMPARE ; EQ } ;
         LAMBDA
           (pair address
                 (big_map string bytes)
                 (pair address (option address) (set address) (set address) (set address) (set address))
                 (pair (set address) (set address) (set address) (set address) (set address))
                 (pair nat
                       (big_map nat nat)
                       (big_map (pair address nat) nat)
                       (big_map (pair address address nat) unit)
                       (big_map nat (pair nat (map string bytes)))
                       (big_map nat (pair nat (map address nat))))
                 (pair nat (map address nat)))
           bool
           { UNPAIR ; SWAP ; GET 3 ; GET 5 ; SWAP ; MEM } ;
         LAMBDA
           (pair address
                 (big_map string bytes)
                 (pair address (option address) (set address) (set address) (set address) (set address))
                 (pair (set address) (set address) (set address) (set address) (set address))
                 (pair nat
                       (big_map nat nat)
                       (big_map (pair address nat) nat)
                       (big_map (pair address address nat) unit)
                       (big_map nat (pair nat (map string bytes)))
                       (big_map nat (pair nat (map address nat))))
                 (pair nat (map address nat)))
           bool
           { UNPAIR ; SWAP ; GET 3 ; GET 7 ; SWAP ; MEM } ;
         LAMBDA
           (pair address
                 (big_map string bytes)
                 (pair address (option address) (set address) (set address) (set address) (set address))
                 (pair (set address) (set address) (set address) (set address) (set address))
                 (pair nat
                       (big_map nat nat)
                       (big_map (pair address nat) nat)
                       (big_map (pair address address nat) unit)
                       (big_map nat (pair nat (map string bytes)))
                       (big_map nat (pair nat (map address nat))))
                 (pair nat (map address nat)))
           bool
           { UNPAIR ; SWAP ; GET 3 ; GET 9 ; SWAP ; MEM } ;
         LAMBDA
           (pair address
                 (big_map string bytes)
                 (pair address (option address) (set address) (set address) (set address) (set address))
                 (pair (set address) (set address) (set address) (set address) (set address))
                 (pair nat
                       (big_map nat nat)
                       (big_map (pair address nat) nat)
                       (big_map (pair address address nat) unit)
                       (big_map nat (pair nat (map string bytes)))
                       (big_map nat (pair nat (map address nat))))
                 (pair nat (map address nat)))
           bool
           { UNPAIR ; SWAP ; GET 3 ; GET 10 ; SWAP ; MEM } ;
         DIG 14 ;
         UNPAIR ;
         SWAP ;
         PUSH string "FA2_DONT_SEND_TEZ" ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         EQ ;
         IF { DROP } { FAILWITH } ;
         SWAP ;
         IF_LEFT
           { DIG 7 ;
             DROP ;
             IF_LEFT
               { DIG 2 ;
                 DIG 3 ;
                 DIG 4 ;
                 DIG 6 ;
                 DIG 7 ;
                 DIG 10 ;
                 DROP 6 ;
                 IF_LEFT
                   { DIG 2 ;
                     DIG 4 ;
                     DIG 8 ;
                     DROP 3 ;
                     IF_LEFT
                       { DIG 2 ;
                         DIG 3 ;
                         DIG 4 ;
                         DIG 5 ;
                         DROP 4 ;
                         DUP 2 ;
                         GET 7 ;
                         SWAP ;
                         IF_LEFT
                           { IF_LEFT
                               { PAIR ; constant "exprvRgGuJMvLwq8Md7T9yNjd7mHQFMeeJZYWAqNijVWdMapMZfsiT" }
                               { PAIR ; constant "exprv7Poi6dBzxoHe5SBiHXynjG2onFGABGf2o1UzjFVRjAuCY1V8P" } }
                           { IF_LEFT
                               { PAIR ; constant "exprv4kvcKTSCUszCEALnwFuwEA5qbgFwNx2m31YpW532icu9c5SqA" }
                               { PAIR ; constant "expruEJ9gH42pz4WzGajmtA4UZrR7Kk9fVJbg3GAcMSQQxDyG98yr7" } } ;
                         SWAP ;
                         DUP 2 ;
                         CDR ;
                         UPDATE 7 ;
                         SWAP ;
                         CAR }
                       { SWAP ;
                         DUP ;
                         GET 7 ;
                         DUP 3 ;
                         GET 3 ;
                         PAIR ;
                         SENDER ;
                         DUP 4 ;
                         CAR ;
                         DIG 2 ;
                         UNPAIR ;
                         PUSH bool True ;
                         DIG 2 ;
                         GET 7 ;
                         DIG 2 ;
                         DUP 5 ;
                         PAIR ;
                         DUP 4 ;
                         PAIR ;
                         MEM ;
                         DIG 3 ;
                         DIG 3 ;
                         COMPARE ;
                         EQ ;
                         OR ;
                         COMPARE ;
                         EQ ;
                         IF {} { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } ;
                         DUP ;
                         GET 7 ;
                         DUP 3 ;
                         GET 3 ;
                         PAIR ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         DUP ;
                         GET 7 ;
                         DUP 3 ;
                         GET 3 ;
                         DUP 4 ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         DUP 5 ;
                         SWAP ;
                         EXEC ;
                         DUP 3 ;
                         GET 4 ;
                         SWAP ;
                         COMPARE ;
                         GE ;
                         IF {} { PUSH string "FA2_INSUFFICIENT_BALANCE" ; FAILWITH } ;
                         DUP ;
                         DUP 2 ;
                         GET 7 ;
                         DUP 3 ;
                         GET 7 ;
                         GET 5 ;
                         DUP 5 ;
                         GET 4 ;
                         DIG 4 ;
                         GET 7 ;
                         DUP 6 ;
                         GET 3 ;
                         DUP 7 ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         DIG 7 ;
                         SWAP ;
                         EXEC ;
                         SUB ;
                         ABS ;
                         DUP 5 ;
                         GET 3 ;
                         DUP 6 ;
                         CAR ;
                         PAIR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 5 ;
                         UPDATE 7 ;
                         DUP ;
                         DUP 2 ;
                         GET 7 ;
                         DUP 3 ;
                         GET 7 ;
                         GET 3 ;
                         DUP 5 ;
                         GET 4 ;
                         DIG 4 ;
                         GET 7 ;
                         DUP 6 ;
                         GET 3 ;
                         PAIR ;
                         DIG 7 ;
                         SWAP ;
                         EXEC ;
                         SUB ;
                         ABS ;
                         DUP 5 ;
                         GET 3 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         UPDATE 7 ;
                         NIL operation ;
                         DUP 2 ;
                         GET 5 ;
                         GET 7 ;
                         ITER { DUP 5 ; SWAP ; EXEC ; PUSH mutez 0 ; DUP 5 ; TRANSFER_TOKENS ; CONS } ;
                         DIG 2 ;
                         DIG 3 ;
                         DROP 2 } }
                   { DIG 3 ;
                     DIG 5 ;
                     DIG 6 ;
                     DIG 7 ;
                     DROP 4 ;
                     IF_LEFT
                       { DIG 2 ;
                         DIG 3 ;
                         DROP 3 ;
                         PUSH string "FA2_NO_PENDING_OWNER" ;
                         DUP 2 ;
                         GET 3 ;
                         GET 3 ;
                         IF_NONE { FAILWITH } { SWAP ; DROP } ;
                         PUSH string "FA2_INVALID_PENDING_OWNER_ACCESS" ;
                         DUP 2 ;
                         SENDER ;
                         COMPARE ;
                         EQ ;
                         IF { DROP } { FAILWITH } ;
                         DUP 2 ;
                         DIG 2 ;
                         GET 3 ;
                         DIG 2 ;
                         UPDATE 1 ;
                         UPDATE 3 ;
                         DUP ;
                         GET 3 ;
                         NONE address ;
                         UPDATE 3 ;
                         UPDATE 3 }
                       { DIG 4 ;
                         DROP ;
                         SWAP ;
                         PUSH string "FA2_INVALID_CREATOR_ACCESS" ;
                         DUP 2 ;
                         SENDER ;
                         PAIR ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         IF { DROP } { FAILWITH } ;
                         PUSH string "FA2_DUP_TOKEN_ID" ;
                         PUSH bool False ;
                         DUP 3 ;
                         GET 7 ;
                         GET 9 ;
                         DUP 5 ;
                         CAR ;
                         CAR ;
                         MEM ;
                         COMPARE ;
                         EQ ;
                         IF { DROP } { FAILWITH } ;
                         DUP ;
                         DUP 2 ;
                         GET 7 ;
                         DIG 2 ;
                         GET 7 ;
                         GET 9 ;
                         DUP 4 ;
                         CAR ;
                         DUP 5 ;
                         CAR ;
                         CAR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 9 ;
                         UPDATE 7 ;
                         DUP ;
                         DUP 2 ;
                         GET 7 ;
                         DIG 2 ;
                         GET 7 ;
                         GET 10 ;
                         DUP 4 ;
                         CDR ;
                         DUP 5 ;
                         CAR ;
                         CAR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 10 ;
                         UPDATE 7 ;
                         DUP ;
                         DUP 2 ;
                         GET 7 ;
                         DIG 2 ;
                         GET 7 ;
                         GET 3 ;
                         PUSH nat 0 ;
                         DUP 5 ;
                         CAR ;
                         CAR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         UPDATE 7 ;
                         DUP ;
                         DUP 2 ;
                         GET 7 ;
                         PUSH nat 1 ;
                         DUP 5 ;
                         CAR ;
                         CAR ;
                         ADD ;
                         DIG 3 ;
                         GET 7 ;
                         CAR ;
                         DUP 2 ;
                         DUP 2 ;
                         COMPARE ;
                         GT ;
                         IF { SWAP ; DROP } { DROP } ;
                         UPDATE 1 ;
                         UPDATE 7 ;
                         NIL operation ;
                         DUP 2 ;
                         GET 5 ;
                         GET 3 ;
                         ITER { DUP 5 ; SWAP ; EXEC ; PUSH mutez 0 ; DUP 5 ; TRANSFER_TOKENS ; CONS } ;
                         DIG 2 ;
                         DIG 3 ;
                         DROP 2 ;
                         SWAP } ;
                     SWAP } }
               { DIG 8 ;
                 DIG 9 ;
                 DROP 2 ;
                 IF_LEFT
                   { DIG 2 ;
                     DIG 3 ;
                     DIG 5 ;
                     DIG 6 ;
                     DIG 12 ;
                     DROP 5 ;
                     IF_LEFT
                       { DIG 2 ;
                         DIG 3 ;
                         DIG 5 ;
                         DIG 6 ;
                         DIG 7 ;
                         DROP 5 ;
                         PUSH string "FA2_INVALID_INTERNAL_TRANSFER_HOOK_ACCESS" ;
                         SELF_ADDRESS ;
                         SENDER ;
                         COMPARE ;
                         EQ ;
                         IF { DROP } { FAILWITH } ;
                         NIL operation ;
                         DUP 3 ;
                         GET 5 ;
                         CAR ;
                         ITER { DUP 5 ; SWAP ; EXEC ; PUSH mutez 0 ; DUP 4 ; TRANSFER_TOKENS ; CONS } ;
                         SWAP ;
                         DIG 3 ;
                         DROP 2 }
                       { DIG 4 ;
                         DROP ;
                         SWAP ;
                         PUSH string "FA2_INVALID_MINTER_ACCESS" ;
                         DUP 2 ;
                         SENDER ;
                         PAIR ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         IF { DROP } { FAILWITH } ;
                         DUP ;
                         GET 7 ;
                         DUP 3 ;
                         GET 3 ;
                         PAIR ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         DUP ;
                         DUP 2 ;
                         GET 7 ;
                         DUP 3 ;
                         GET 7 ;
                         GET 5 ;
                         DUP 5 ;
                         GET 4 ;
                         DIG 4 ;
                         GET 7 ;
                         DUP 6 ;
                         GET 3 ;
                         DUP 7 ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         DIG 7 ;
                         SWAP ;
                         EXEC ;
                         ADD ;
                         DUP 5 ;
                         GET 3 ;
                         DUP 6 ;
                         CAR ;
                         PAIR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 5 ;
                         UPDATE 7 ;
                         DUP ;
                         DUP 2 ;
                         GET 7 ;
                         DUP 3 ;
                         GET 7 ;
                         GET 3 ;
                         DUP 5 ;
                         GET 4 ;
                         DIG 4 ;
                         GET 7 ;
                         DUP 6 ;
                         GET 3 ;
                         PAIR ;
                         DIG 7 ;
                         SWAP ;
                         EXEC ;
                         ADD ;
                         DUP 5 ;
                         GET 3 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         UPDATE 7 ;
                         NIL operation ;
                         DUP 2 ;
                         GET 5 ;
                         GET 5 ;
                         ITER { DUP 5 ; SWAP ; EXEC ; PUSH mutez 0 ; DUP 5 ; TRANSFER_TOKENS ; CONS } ;
                         DIG 2 ;
                         DIG 3 ;
                         DROP 2 } ;
                     SWAP }
                   { DIG 7 ;
                     DIG 8 ;
                     DIG 9 ;
                     DIG 10 ;
                     DIG 11 ;
                     DROP 5 ;
                     IF_LEFT
                       { ITER { IF_LEFT
                                  { IF_LEFT
                                      { IF_LEFT
                                          { DROP ;
                                            PUSH string "FA2_INVALID_CREATOR_ACCESS" ;
                                            DUP 2 ;
                                            SENDER ;
                                            PAIR ;
                                            DUP 7 ;
                                            SWAP ;
                                            EXEC ;
                                            IF { DROP } { FAILWITH } ;
                                            DUP ;
                                            DUP 2 ;
                                            GET 3 ;
                                            DIG 2 ;
                                            GET 3 ;
                                            GET 5 ;
                                            SENDER ;
                                            PUSH bool False ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 5 ;
                                            UPDATE 3 }
                                          { DROP ;
                                            PUSH string "FA2_INVALID_METADATA_MANAGER_ACCESS" ;
                                            DUP 2 ;
                                            SENDER ;
                                            PAIR ;
                                            DUP 5 ;
                                            SWAP ;
                                            EXEC ;
                                            IF { DROP } { FAILWITH } ;
                                            DUP ;
                                            DUP 2 ;
                                            GET 3 ;
                                            DIG 2 ;
                                            GET 3 ;
                                            GET 9 ;
                                            SENDER ;
                                            PUSH bool False ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 9 ;
                                            UPDATE 3 } }
                                      { IF_LEFT
                                          { DROP ;
                                            PUSH string "FA2_INVALID_MINTER_ACCESS" ;
                                            DUP 2 ;
                                            SENDER ;
                                            PAIR ;
                                            DUP 6 ;
                                            SWAP ;
                                            EXEC ;
                                            IF { DROP } { FAILWITH } ;
                                            DUP ;
                                            DUP 2 ;
                                            GET 3 ;
                                            DIG 2 ;
                                            GET 3 ;
                                            GET 7 ;
                                            SENDER ;
                                            PUSH bool False ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 7 ;
                                            UPDATE 3 }
                                          { DROP ;
                                            PUSH string "FA2_INVALID_OWNER_ACCESS" ;
                                            DUP 2 ;
                                            SENDER ;
                                            PAIR ;
                                            DUP 8 ;
                                            SWAP ;
                                            EXEC ;
                                            IF { DROP } { FAILWITH } ;
                                            DUP ;
                                            GET 3 ;
                                            PUSH address "tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU" ;
                                            UPDATE 1 ;
                                            UPDATE 3 } } }
                                  { DROP ;
                                    PUSH string "FA2_INVALID_ROYALTIES_MANAGER_ACCESS" ;
                                    DUP 2 ;
                                    SENDER ;
                                    PAIR ;
                                    DUP 4 ;
                                    SWAP ;
                                    EXEC ;
                                    IF { DROP } { FAILWITH } ;
                                    DUP ;
                                    DUP 2 ;
                                    GET 3 ;
                                    DIG 2 ;
                                    GET 3 ;
                                    GET 10 ;
                                    SENDER ;
                                    PUSH bool False ;
                                    SWAP ;
                                    UPDATE ;
                                    UPDATE 10 ;
                                    UPDATE 3 } } ;
                         SWAP ;
                         DIG 2 ;
                         DIG 3 ;
                         DIG 4 ;
                         DIG 5 ;
                         DROP 5 }
                       { DIG 2 ;
                         DIG 3 ;
                         DIG 4 ;
                         DIG 5 ;
                         DROP 4 ;
                         SWAP ;
                         PUSH string "FA2_INVALID_OWNER_ACCESS" ;
                         DUP 2 ;
                         SENDER ;
                         PAIR ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         IF { DROP } { FAILWITH } ;
                         DUP ;
                         GET 3 ;
                         DIG 2 ;
                         SOME ;
                         UPDATE 3 ;
                         UPDATE 3 } } ;
                 SWAP } }
           { DIG 4 ;
             DIG 5 ;
             DIG 12 ;
             DIG 13 ;
             DIG 14 ;
             DROP 5 ;
             IF_LEFT
               { IF_LEFT
                   { DIG 3 ;
                     DROP ;
                     IF_LEFT
                       { DIG 3 ;
                         DIG 4 ;
                         DIG 5 ;
                         DIG 6 ;
                         DIG 7 ;
                         DIG 8 ;
                         DROP 6 ;
                         SWAP ;
                         PUSH string "FA2_INVALID_ROYALTIES_MANAGER_ACCESS" ;
                         DUP 2 ;
                         SENDER ;
                         PAIR ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         IF { DROP } { FAILWITH } ;
                         SWAP ;
                         UPDATE 8 }
                       { DIG 2 ;
                         DROP ;
                         ITER { SWAP ;
                                PUSH string "FA2_INVALID_OWNER_ACCESS" ;
                                DUP 2 ;
                                SENDER ;
                                PAIR ;
                                DUP 5 ;
                                SWAP ;
                                EXEC ;
                                IF { DROP } { FAILWITH } ;
                                SWAP ;
                                IF_LEFT
                                  { IF_LEFT
                                      { IF_LEFT
                                          { IF_LEFT
                                              { DUP ;
                                                DUP 7 ;
                                                SWAP ;
                                                EXEC ;
                                                DROP ;
                                                DUP 2 ;
                                                DUP 3 ;
                                                GET 5 ;
                                                DIG 3 ;
                                                GET 5 ;
                                                GET 7 ;
                                                DIG 3 ;
                                                PUSH bool True ;
                                                SWAP ;
                                                UPDATE ;
                                                UPDATE 7 ;
                                                UPDATE 5 }
                                              { DUP ;
                                                DUP 8 ;
                                                SWAP ;
                                                EXEC ;
                                                DROP ;
                                                DUP 2 ;
                                                DUP 3 ;
                                                GET 5 ;
                                                DIG 3 ;
                                                GET 5 ;
                                                GET 3 ;
                                                DIG 3 ;
                                                PUSH bool True ;
                                                SWAP ;
                                                UPDATE ;
                                                UPDATE 3 ;
                                                UPDATE 5 } }
                                          { IF_LEFT
                                              { DUP ;
                                                DUP 6 ;
                                                SWAP ;
                                                EXEC ;
                                                DROP ;
                                                DUP 2 ;
                                                DUP 3 ;
                                                GET 5 ;
                                                DIG 3 ;
                                                GET 5 ;
                                                GET 5 ;
                                                DIG 3 ;
                                                PUSH bool True ;
                                                SWAP ;
                                                UPDATE ;
                                                UPDATE 5 ;
                                                UPDATE 5 }
                                              { DUP ;
                                                DUP 9 ;
                                                SWAP ;
                                                EXEC ;
                                                DROP ;
                                                DUP 2 ;
                                                DUP 3 ;
                                                GET 5 ;
                                                DIG 3 ;
                                                GET 5 ;
                                                CAR ;
                                                DIG 3 ;
                                                PUSH bool True ;
                                                SWAP ;
                                                UPDATE ;
                                                UPDATE 1 ;
                                                UPDATE 5 } } }
                                      { IF_LEFT
                                          { IF_LEFT
                                              { DUP ;
                                                DUP 5 ;
                                                SWAP ;
                                                EXEC ;
                                                DROP ;
                                                DUP 2 ;
                                                DUP 3 ;
                                                GET 5 ;
                                                DIG 3 ;
                                                GET 5 ;
                                                GET 8 ;
                                                DIG 3 ;
                                                PUSH bool True ;
                                                SWAP ;
                                                UPDATE ;
                                                UPDATE 8 ;
                                                UPDATE 5 }
                                              { DUP 2 ;
                                                DUP 3 ;
                                                GET 5 ;
                                                DIG 3 ;
                                                GET 5 ;
                                                GET 7 ;
                                                DIG 3 ;
                                                PUSH bool False ;
                                                SWAP ;
                                                UPDATE ;
                                                UPDATE 7 ;
                                                UPDATE 5 } }
                                          { IF_LEFT
                                              { DUP 2 ;
                                                DUP 3 ;
                                                GET 5 ;
                                                DIG 3 ;
                                                GET 5 ;
                                                GET 3 ;
                                                DIG 3 ;
                                                PUSH bool False ;
                                                SWAP ;
                                                UPDATE ;
                                                UPDATE 3 ;
                                                UPDATE 5 }
                                              { DUP 2 ;
                                                DUP 3 ;
                                                GET 5 ;
                                                DIG 3 ;
                                                GET 5 ;
                                                GET 5 ;
                                                DIG 3 ;
                                                PUSH bool False ;
                                                SWAP ;
                                                UPDATE ;
                                                UPDATE 5 ;
                                                UPDATE 5 } } } }
                                  { IF_LEFT
                                      { DUP 2 ;
                                        DUP 3 ;
                                        GET 5 ;
                                        DIG 3 ;
                                        GET 5 ;
                                        CAR ;
                                        DIG 3 ;
                                        PUSH bool False ;
                                        SWAP ;
                                        UPDATE ;
                                        UPDATE 1 ;
                                        UPDATE 5 }
                                      { DUP 2 ;
                                        DUP 3 ;
                                        GET 5 ;
                                        DIG 3 ;
                                        GET 5 ;
                                        GET 8 ;
                                        DIG 3 ;
                                        PUSH bool False ;
                                        SWAP ;
                                        UPDATE ;
                                        UPDATE 8 ;
                                        UPDATE 5 } } } ;
                         SWAP ;
                         DIG 2 ;
                         DIG 3 ;
                         DIG 4 ;
                         DIG 5 ;
                         DIG 6 ;
                         DROP 6 } }
                   { DIG 2 ;
                     DIG 6 ;
                     DIG 7 ;
                     DIG 8 ;
                     DIG 9 ;
                     DROP 5 ;
                     IF_LEFT
                       { DIG 3 ;
                         DIG 5 ;
                         DROP 2 ;
                         SWAP ;
                         PUSH string "FA2_INVALID_METADATA_MANAGER_ACCESS" ;
                         DUP 2 ;
                         SENDER ;
                         PAIR ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         IF { DROP } { FAILWITH } ;
                         DUP 2 ;
                         ITER { UNPAIR ;
                                DUP 3 ;
                                DUP 4 ;
                                GET 7 ;
                                DIG 4 ;
                                GET 7 ;
                                GET 9 ;
                                DIG 4 ;
                                DIG 4 ;
                                SWAP ;
                                SOME ;
                                SWAP ;
                                UPDATE ;
                                UPDATE 9 ;
                                UPDATE 7 } ;
                         NIL operation ;
                         DUP 2 ;
                         GET 5 ;
                         GET 8 ;
                         ITER { DUP 5 ; SWAP ; EXEC ; PUSH mutez 0 ; DUP 5 ; TRANSFER_TOKENS ; CONS } ;
                         DIG 2 ;
                         DIG 3 ;
                         DROP 2 ;
                         SWAP }
                       { DIG 2 ;
                         DIG 4 ;
                         DROP 2 ;
                         ITER { SWAP ;
                                PUSH string "FA2_INVALID_OWNER_ACCESS" ;
                                DUP 2 ;
                                SENDER ;
                                PAIR ;
                                DUP 5 ;
                                SWAP ;
                                EXEC ;
                                IF { DROP } { FAILWITH } ;
                                SWAP ;
                                IF_LEFT
                                  { IF_LEFT
                                      { IF_LEFT
                                          { DUP 2 ;
                                            DUP 3 ;
                                            GET 3 ;
                                            DIG 3 ;
                                            GET 3 ;
                                            GET 5 ;
                                            DIG 3 ;
                                            PUSH bool True ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 5 ;
                                            UPDATE 3 }
                                          { DUP 2 ;
                                            DUP 3 ;
                                            GET 3 ;
                                            DIG 3 ;
                                            GET 3 ;
                                            GET 9 ;
                                            DIG 3 ;
                                            PUSH bool True ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 9 ;
                                            UPDATE 3 } }
                                      { IF_LEFT
                                          { DUP 2 ;
                                            DUP 3 ;
                                            GET 3 ;
                                            DIG 3 ;
                                            GET 3 ;
                                            GET 7 ;
                                            DIG 3 ;
                                            PUSH bool True ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 7 ;
                                            UPDATE 3 }
                                          { DUP 2 ;
                                            DUP 3 ;
                                            GET 3 ;
                                            DIG 3 ;
                                            GET 3 ;
                                            GET 10 ;
                                            DIG 3 ;
                                            PUSH bool True ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 10 ;
                                            UPDATE 3 } } }
                                  { IF_LEFT
                                      { IF_LEFT
                                          { DUP 2 ;
                                            DUP 3 ;
                                            GET 3 ;
                                            DIG 3 ;
                                            GET 3 ;
                                            GET 5 ;
                                            DIG 3 ;
                                            PUSH bool False ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 5 ;
                                            UPDATE 3 }
                                          { DUP 2 ;
                                            DUP 3 ;
                                            GET 3 ;
                                            DIG 3 ;
                                            GET 3 ;
                                            GET 9 ;
                                            DIG 3 ;
                                            PUSH bool False ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 9 ;
                                            UPDATE 3 } }
                                      { IF_LEFT
                                          { DUP 2 ;
                                            DUP 3 ;
                                            GET 3 ;
                                            DIG 3 ;
                                            GET 3 ;
                                            GET 7 ;
                                            DIG 3 ;
                                            PUSH bool False ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 7 ;
                                            UPDATE 3 }
                                          { DUP 2 ;
                                            DUP 3 ;
                                            GET 3 ;
                                            DIG 3 ;
                                            GET 3 ;
                                            GET 10 ;
                                            DIG 3 ;
                                            PUSH bool False ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 10 ;
                                            UPDATE 3 } } } } ;
                         SWAP ;
                         DROP } } }
               { DIG 3 ;
                 DIG 4 ;
                 DIG 5 ;
                 DIG 6 ;
                 DIG 7 ;
                 DIG 8 ;
                 DIG 9 ;
                 DROP 7 ;
                 SWAP ;
                 PUSH string "FA2_INVALID_ROYALTIES_MANAGER_ACCESS" ;
                 DUP 2 ;
                 SENDER ;
                 PAIR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 IF { DROP } { FAILWITH } ;
                 SWAP ;
                 ITER { UNPAIR ;
                        DUP 3 ;
                        DUP 4 ;
                        GET 7 ;
                        DIG 4 ;
                        GET 7 ;
                        GET 10 ;
                        DIG 4 ;
                        DIG 4 ;
                        SWAP ;
                        SOME ;
                        SWAP ;
                        UPDATE ;
                        UPDATE 10 ;
                        UPDATE 7 } } ;
             SWAP } ;
         PAIR } ;
  view "get_owner" unit address { CDR ; GET 3 ; CAR } ;
  view "is_owner"
       address
       bool
       { UNPAIR ; SWAP ; GET 3 ; CAR ; SWAP ; COMPARE ; EQ } ;
  view "is_creator" address bool { UNPAIR ; SWAP ; GET 3 ; GET 5 ; SWAP ; MEM } ;
  view "is_minter" address bool { UNPAIR ; SWAP ; GET 3 ; GET 7 ; SWAP ; MEM } ;
  view "is_metadata_manager"
       address
       bool
       { UNPAIR ; SWAP ; GET 3 ; GET 9 ; SWAP ; MEM } ;
  view "is_royalties_manager"
       address
       bool
       { UNPAIR ; SWAP ; GET 3 ; GET 10 ; SWAP ; MEM } ;
  view "next_token_id" unit nat { CDR ; GET 7 ; CAR } ;
  view "get_balance"
       (pair (address %owner) (nat %token_id))
       nat
       { UNPAIR ;
         SWAP ;
         GET 7 ;
         GET 5 ;
         DUP 2 ;
         CDR ;
         DIG 2 ;
         CAR ;
         PAIR ;
         GET ;
         IF_NONE { PUSH nat 0 } {} } ;
  view "total_supply"
       nat
       nat
       { UNPAIR ;
         SWAP ;
         GET 7 ;
         GET 3 ;
         SWAP ;
         GET ;
         IF_NONE { PUSH nat 0 } {} } ;
  view "is_operator"
       (pair (address %owner) (address %operator) (nat %token_id))
       bool
       { UNPAIR ;
         DUP ;
         GET 3 ;
         DUP 2 ;
         CAR ;
         DIG 3 ;
         GET 7 ;
         GET 7 ;
         DIG 3 ;
         GET 4 ;
         DUP 4 ;
         PAIR ;
         DUP 3 ;
         PAIR ;
         MEM ;
         DUG 2 ;
         COMPARE ;
         EQ ;
         OR } ;
  view "get_royalties"
       nat
       (pair (nat %total_shares) (map %shares address nat))
       { UNPAIR ;
         DUP 2 ;
         GET 7 ;
         GET 10 ;
         SWAP ;
         GET ;
         IF_NONE { GET 8 } { SWAP ; DROP } } }

