{ parameter
    (or (or (or %fa2_core_action
               (or (list %assert_balances (pair (address %owner) (nat %token_id) (nat %balance)))
                   (pair %balance_of
                      (list %requests (pair (address %owner) (nat %token_id)))
                      (contract %callback
                         (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))))
               (or (list %transfer
                      (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount)))))
                   (list %update_operators
                      (or (pair %add_operator (address %owner) (address %operator) (nat %token_id))
                          (pair %remove_operator (address %owner) (address %operator) (nat %token_id))))))
            (or %fa2_plus_action
               (or (pair %burn (address %owner) (nat %token_id) (nat %amount))
                   (pair %create
                      (pair %token_metadata (nat %token_id) (map %token_info string bytes))
                      (pair %royalties (nat %total_shares) (map %shares address nat))
                      (nat %max_supply)))
               (pair %mint (address %owner) (nat %token_id) (nat %amount))))
        (or (or %owner_action
               (or (address %transfer_ownership) (map %update_contract_metadata string bytes))
               (or (list %update_hooks
                      (or (pair %add
                             (or (or (or (unit %burn) (unit %create)) (or (unit %metadata) (unit %mint)))
                                 (unit %transfer))
                             address)
                          (pair %remove
                             (or (or (or (unit %burn) (unit %create)) (or (unit %metadata) (unit %mint)))
                                 (unit %transfer))
                             address)))
                   (list %update_roles
                      (or (pair %add
                             (or (or (unit %creator) (unit %metadata_manager))
                                 (or (unit %minter) (unit %royalties_manager)))
                             address)
                          (pair %remove
                             (or (or (unit %creator) (unit %metadata_manager))
                                 (or (unit %minter) (unit %royalties_manager)))
                             address)))))
            (or %privileged_action
               (or (or (set %cement_metadata nat) (unit %confirm_ownership))
                   (or (list %renounce_roles
                          (or (or (or (unit %creator) (unit %metadata_manager)) (or (unit %minter) (unit %ownership)))
                              (unit %royalties_manager)))
                       (pair %update_default_royalties (nat %total_shares) (map %shares address nat))))
               (or (map %update_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
                   (map %update_royalties nat (pair (nat %total_shares) (map %shares address nat))))))) ;
  storage
    (pair (big_map %metadata string bytes)
          (pair %roles
             (address %owner)
             (option %pending_owner address)
             (set %creator address)
             (set %minter address)
             (set %metadata_manager address)
             (set %royalties_manager address))
          (pair %hooks
             (set %transfer address)
             (set %create address)
             (set %mint address)
             (set %burn address)
             (set %update_metadata address))
          (nat %next_token_id)
          (big_map %token_total_supply nat nat)
          (big_map %ledger (pair address nat) nat)
          (big_map %operators (pair address address nat) unit)
          (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
          (big_map %royalties nat (pair (nat %total_shares) (map %shares address nat)))
          (big_map %token_max_supply nat nat)
          (big_map %cemented_tokens nat unit)
          (pair %default_royalties (nat %total_shares) (map %shares address nat))) ;
  code { UNPAIR ;
         PUSH string "FA2_DONT_SEND_TEZ" ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         EQ ;
         IF { DROP } { FAILWITH } ;
         IF_LEFT
           { IF_LEFT
               { PAIR ; constant "exprvMnRY77WUvhcQ9hh26a5SjpRQvtwMyvLTHQ33p5vPofUocTUKY" }
               { PAIR ; constant "exprvByofuajxu9XbaRHkr5fzZbdZpPnX2VEZBtYX4RKyosxiWDe3V" } }
           { IF_LEFT
               { PAIR ; constant "expruU5GvmZa1PfpPrwdXp4wECZBZ6TUUhYxuvJKBuWz3Bz5JtoVwL" }
               { PAIR ; constant "expruBrVeSyayhN73xkkULj2a7PLpdS4th15zFt3p48oHDx8pkxvGx" } } } ;
  view "get_owner" unit address { CDR ; GET 3 ; CAR } ;
  view "is_owner"
       address
       bool
       { UNPAIR ; SWAP ; GET 3 ; CAR ; SWAP ; COMPARE ; EQ } ;
  view "is_creator" address bool { UNPAIR ; SWAP ; GET 3 ; GET 5 ; SWAP ; MEM } ;
  view "is_minter" address bool { UNPAIR ; SWAP ; GET 3 ; GET 7 ; SWAP ; MEM } ;
  view "is_metadata_manager"
       address
       bool
       { UNPAIR ; SWAP ; GET 3 ; GET 9 ; SWAP ; MEM } ;
  view "is_royalties_manager"
       address
       bool
       { UNPAIR ; SWAP ; GET 3 ; GET 10 ; SWAP ; MEM } ;
  view "is_transfer_hook"
       address
       bool
       { UNPAIR ; SWAP ; GET 5 ; CAR ; SWAP ; MEM } ;
  view "is_create_hook"
       address
       bool
       { UNPAIR ; SWAP ; GET 5 ; GET 3 ; SWAP ; MEM } ;
  view "is_mint_hook"
       address
       bool
       { UNPAIR ; SWAP ; GET 5 ; GET 5 ; SWAP ; MEM } ;
  view "is_burn_hook"
       address
       bool
       { UNPAIR ; SWAP ; GET 5 ; GET 7 ; SWAP ; MEM } ;
  view "is_metadata_update_hook"
       address
       bool
       { UNPAIR ; SWAP ; GET 5 ; GET 8 ; SWAP ; MEM } ;
  view "is_cemented"
       nat
       bool
       { UNPAIR ;
         SWAP ;
         GET 21 ;
         SWAP ;
         GET ;
         IF_NONE { PUSH bool False } { DROP ; PUSH bool True } } ;
  view "next_token_id" unit nat { CDR ; GET 7 } ;
  view "get_balance"
       (pair (address %owner) (nat %token_id))
       nat
       { UNPAIR ;
         SWAP ;
         GET 11 ;
         DUP 2 ;
         CDR ;
         DIG 2 ;
         CAR ;
         PAIR ;
         GET ;
         IF_NONE { PUSH nat 0 } {} } ;
  view "get_total_supply"
       nat
       nat
       { UNPAIR ; SWAP ; GET 9 ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
  view "get_max_supply"
       nat
       nat
       { UNPAIR ; SWAP ; GET 19 ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
  view "is_operator"
       (pair (address %owner) (address %operator) (nat %token_id))
       bool
       { UNPAIR ;
         DUP ;
         GET 3 ;
         DUP 2 ;
         CAR ;
         DIG 3 ;
         GET 13 ;
         DIG 3 ;
         GET 4 ;
         DUP 4 ;
         PAIR ;
         DUP 3 ;
         PAIR ;
         MEM ;
         DUG 2 ;
         COMPARE ;
         EQ ;
         OR } ;
  view "get_token_metadata"
       nat
       (map string bytes)
       { UNPAIR ;
         SWAP ;
         GET 15 ;
         SWAP ;
         GET ;
         IF_NONE { EMPTY_MAP string bytes } { CDR } } ;
  view "is_token" nat bool { UNPAIR ; SWAP ; GET 9 ; SWAP ; MEM } ;
  view "get_royalties"
       nat
       (pair (nat %total_shares) (map %shares address nat))
       { UNPAIR ;
         DUP 2 ;
         GET 17 ;
         SWAP ;
         GET ;
         IF_NONE { GET 22 } { SWAP ; DROP } } }

