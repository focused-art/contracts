{ parameter
    (or (or (or (list %assert_balances (pair (address %owner) (nat %token_id) (nat %balance)))
                (pair %balance_of
                   (list %requests (pair (address %owner) (nat %token_id)))
                   (contract %callback
                      (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))))
            (or (pair %burn (address %owner) (nat %token_id) (nat %amount))
                (pair %create
                   (map %token_metadata string bytes)
                   (nat %max_supply)
                   (option %royalties (pair (nat %total_shares) (map %shares address nat)))
                   (option %token_id nat))))
        (or (or (pair %mint (address %owner) (nat %token_id) (nat %amount))
                (or %privileged_action
                   (or (map %update_contract_metadata string bytes)
                       (pair %update_default_royalties (nat %total_shares) (map %shares address nat)))
                   (or (map %update_metadata nat (map string bytes))
                       (map %update_royalties nat (pair (nat %total_shares) (map %shares address nat))))))
            (or (list %transfer
                   (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount)))))
                (list %update_operators
                   (or (pair %add_operator (address %owner) (address %operator) (nat %token_id))
                       (pair %remove_operator (address %owner) (address %operator) (nat %token_id))))))) ;
  storage
    (pair (big_map %metadata string bytes)
          (address %protocol)
          (nat %next_token_id)
          (big_map %token_total_supply nat nat)
          (big_map %ledger (pair address nat) nat)
          (big_map %operators (pair address address nat) unit)
          (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
          (big_map %royalties nat (pair (nat %total_shares) (map %shares address nat)))
          (big_map %token_max_supply nat nat)
          (pair %default_royalties (nat %total_shares) (map %shares address nat))) ;
  code { LAMBDA
           (pair nat
                 (big_map string bytes)
                 address
                 nat
                 (big_map nat nat)
                 (big_map (pair address nat) nat)
                 (big_map (pair address address nat) unit)
                 (big_map nat (pair nat (map string bytes)))
                 (big_map nat (pair nat (map address nat)))
                 (big_map nat nat)
                 (pair nat (map address nat)))
           nat
           { UNPAIR ; SWAP ; GET 7 ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
         LAMBDA
           (pair address
                 nat
                 (big_map string bytes)
                 address
                 nat
                 (big_map nat nat)
                 (big_map (pair address nat) nat)
                 (big_map (pair address address nat) unit)
                 (big_map nat (pair nat (map string bytes)))
                 (big_map nat (pair nat (map address nat)))
                 (big_map nat nat)
                 (pair nat (map address nat)))
           nat
           { UNPAIR 3 ;
             DIG 2 ;
             GET 9 ;
             DUG 2 ;
             PAIR ;
             GET ;
             IF_NONE { PUSH nat 0 } {} } ;
         LAMBDA
           (pair address
                 address
                 nat
                 (big_map string bytes)
                 address
                 nat
                 (big_map nat nat)
                 (big_map (pair address nat) nat)
                 (big_map (pair address address nat) unit)
                 (big_map nat (pair nat (map string bytes)))
                 (big_map nat (pair nat (map address nat)))
                 (big_map nat nat)
                 (pair nat (map address nat)))
           unit
           { UNPAIR 4 ;
             PUSH bool True ;
             DIG 4 ;
             GET 11 ;
             DIG 4 ;
             DUP 5 ;
             PAIR ;
             DUP 4 ;
             PAIR ;
             MEM ;
             DIG 3 ;
             DIG 3 ;
             COMPARE ;
             EQ ;
             OR ;
             COMPARE ;
             EQ ;
             IF { UNIT } { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } } ;
         LAMBDA
           (pair address string)
           unit
           { UNPAIR ; SENDER ; COMPARE ; EQ ; IF { DROP ; UNIT } { FAILWITH } } ;
         LAMBDA
           (pair nat
                 (big_map string bytes)
                 address
                 nat
                 (big_map nat nat)
                 (big_map (pair address nat) nat)
                 (big_map (pair address address nat) unit)
                 (big_map nat (pair nat (map string bytes)))
                 (big_map nat (pair nat (map address nat)))
                 (big_map nat nat)
                 (pair nat (map address nat)))
           unit
           { UNPAIR ;
             SWAP ;
             GET 5 ;
             SWAP ;
             COMPARE ;
             LT ;
             IF { UNIT } { PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH } } ;
         LAMBDA
           (pair address (or (or unit unit) (or unit unit)))
           (lambda
              (pair (big_map string bytes)
                    address
                    nat
                    (big_map nat nat)
                    (big_map (pair address nat) nat)
                    (big_map (pair address address nat) unit)
                    (big_map nat (pair nat (map string bytes)))
                    (big_map nat (pair nat (map address nat)))
                    (big_map nat nat)
                    (pair nat (map address nat)))
              bool)
           { UNPAIR ;
             LAMBDA
               (pair (pair address (or (or unit unit) (or unit unit)))
                     (pair (big_map string bytes)
                           address
                           nat
                           (big_map nat nat)
                           (big_map (pair address nat) nat)
                           (big_map (pair address address nat) unit)
                           (big_map nat (pair nat (map string bytes)))
                           (big_map nat (pair nat (map address nat)))
                           (big_map nat nat)
                           (pair nat (map address nat))))
               bool
               { UNPAIR ;
                 UNPAIR ;
                 DIG 2 ;
                 GET 3 ;
                 DUG 2 ;
                 SELF_ADDRESS ;
                 PAIR ;
                 PAIR ;
                 VIEW "has_role" bool ;
                 IF_NONE { PUSH bool False } {} } ;
             DUP 3 ;
             DUP 3 ;
             PAIR ;
             APPLY ;
             SWAP ;
             DIG 2 ;
             DROP 2 } ;
         LAMBDA
           (pair (or (or (or unit unit) (or unit unit)) unit)
                 (big_map string bytes)
                 address
                 nat
                 (big_map nat nat)
                 (big_map (pair address nat) nat)
                 (big_map (pair address address nat) unit)
                 (big_map nat (pair nat (map string bytes)))
                 (big_map nat (pair nat (map address nat)))
                 (big_map nat nat)
                 (pair nat (map address nat)))
           (set address)
           { UNPAIR ;
             SWAP ;
             GET 3 ;
             SWAP ;
             SELF_ADDRESS ;
             PAIR ;
             VIEW "get_hooks" (set address) ;
             IF_NONE { EMPTY_SET address } {} } ;
         DIG 7 ;
         UNPAIR ;
         PUSH string "FA2_DONT_SEND_TEZ" ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         EQ ;
         IF { DROP } { FAILWITH } ;
         IF_LEFT
           { DIG 5 ;
             DROP ;
             IF_LEFT
               { DIG 2 ;
                 DIG 3 ;
                 DIG 5 ;
                 DIG 7 ;
                 DROP 4 ;
                 IF_LEFT
                   { DIG 2 ;
                     DROP ;
                     ITER { PUSH string "FA2_INSUFFICIENT_BALANCE" ;
                            DUP 2 ;
                            GET 4 ;
                            DUP 4 ;
                            DUP 4 ;
                            GET 3 ;
                            DIG 4 ;
                            CAR ;
                            PAIR 3 ;
                            DUP 5 ;
                            SWAP ;
                            EXEC ;
                            COMPARE ;
                            GE ;
                            IF { DROP } { FAILWITH } } ;
                     SWAP ;
                     DROP ;
                     NIL operation }
                   { NIL (pair (pair address nat) nat) ;
                     DUP 2 ;
                     CAR ;
                     ITER { DUP 4 ;
                            DUP 2 ;
                            CDR ;
                            PAIR ;
                            DUP 6 ;
                            SWAP ;
                            EXEC ;
                            DROP ;
                            DUP 4 ;
                            DUP 2 ;
                            CDR ;
                            DUP 3 ;
                            CAR ;
                            PAIR 3 ;
                            DUP 7 ;
                            SWAP ;
                            EXEC ;
                            SWAP ;
                            PAIR ;
                            CONS } ;
                     DIG 3 ;
                     DIG 4 ;
                     DROP 2 ;
                     NIL operation ;
                     DIG 2 ;
                     CDR ;
                     PUSH mutez 0 ;
                     DIG 3 ;
                     TRANSFER_TOKENS ;
                     CONS } }
               { IF_LEFT
                   { DIG 3 ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUP 3 ;
                     GET 3 ;
                     SENDER ;
                     DUP 5 ;
                     CAR ;
                     PAIR 4 ;
                     DIG 5 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP ;
                     DUP 3 ;
                     GET 3 ;
                     PAIR ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP ;
                     DUP 3 ;
                     GET 3 ;
                     DUP 4 ;
                     CAR ;
                     PAIR 3 ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     DUP 3 ;
                     GET 4 ;
                     DUP 2 ;
                     COMPARE ;
                     GE ;
                     IF {} { PUSH string "FA2_INSUFFICIENT_BALANCE" ; FAILWITH } ;
                     DUP 3 ;
                     GET 4 ;
                     SWAP ;
                     SUB ;
                     ISNAT ;
                     IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                     DUP 2 ;
                     DIG 2 ;
                     GET 9 ;
                     DUP 3 ;
                     SOME ;
                     DUP 5 ;
                     GET 3 ;
                     DUP 6 ;
                     CAR ;
                     PAIR ;
                     UPDATE ;
                     UPDATE 9 ;
                     SWAP ;
                     DUP 3 ;
                     GET 4 ;
                     DUP 3 ;
                     DUP 5 ;
                     GET 3 ;
                     PAIR ;
                     DIG 6 ;
                     SWAP ;
                     EXEC ;
                     SUB ;
                     ISNAT ;
                     IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                     DUP 3 ;
                     DIG 3 ;
                     GET 7 ;
                     DUP 3 ;
                     SOME ;
                     DUP 6 ;
                     GET 3 ;
                     UPDATE ;
                     UPDATE 7 ;
                     DUG 2 ;
                     NIL operation ;
                     DUP 4 ;
                     UNIT ;
                     LEFT unit ;
                     LEFT (or unit unit) ;
                     LEFT unit ;
                     PAIR ;
                     DIG 6 ;
                     SWAP ;
                     EXEC ;
                     ITER { CONTRACT %burn_hook (pair (address %owner) (nat %token_id) (nat %amount)) ;
                            IF_NONE { PUSH string "FA_BURN_HOOK_UNDEFINED" ; FAILWITH } {} ;
                            PUSH mutez 0 ;
                            DUP 7 ;
                            TRANSFER_TOKENS ;
                            CONS } ;
                     PUSH int -1 ;
                     DUP 6 ;
                     GET 4 ;
                     INT ;
                     MUL ;
                     DIG 2 ;
                     DUP 6 ;
                     GET 3 ;
                     NIL (pair address int) ;
                     PUSH int -1 ;
                     DUP 9 ;
                     GET 4 ;
                     INT ;
                     MUL ;
                     DUP 9 ;
                     CAR ;
                     PAIR ;
                     CONS ;
                     PAIR 4 ;
                     EMIT %total_supply_update
                       (pair (list (pair (address %owner) (int %owner_diff)))
                             (nat %token_id)
                             (nat %new_total_supply)
                             (int %diff)) ;
                     CONS ;
                     PUSH int -1 ;
                     DUP 5 ;
                     GET 4 ;
                     INT ;
                     MUL ;
                     DIG 2 ;
                     DUP 5 ;
                     GET 3 ;
                     DIG 5 ;
                     CAR ;
                     PAIR 4 ;
                     EMIT %balance_update
                       (pair (address %owner) (nat %token_id) (nat %new_balance) (int %diff)) }
                   { DIG 4 ;
                     DIG 5 ;
                     DIG 6 ;
                     DIG 7 ;
                     DROP 4 ;
                     SWAP ;
                     PUSH string "FA2_INVALID_CREATOR_ACCESS" ;
                     DUP 2 ;
                     UNIT ;
                     LEFT unit ;
                     LEFT (or unit unit) ;
                     SENDER ;
                     PAIR ;
                     DIG 6 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     EXEC ;
                     IF { DROP } { FAILWITH } ;
                     DUP 2 ;
                     GET 6 ;
                     IF_NONE { DUP ; GET 5 } {} ;
                     PUSH string "FA2_DUP_TOKEN_ID" ;
                     PUSH bool False ;
                     DUP 4 ;
                     GET 13 ;
                     DUP 4 ;
                     MEM ;
                     COMPARE ;
                     EQ ;
                     IF { DROP } { FAILWITH } ;
                     DUP 2 ;
                     DIG 2 ;
                     GET 13 ;
                     DUP 4 ;
                     CAR ;
                     DUP 4 ;
                     PAIR ;
                     DUP 4 ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 13 ;
                     SWAP ;
                     DUP 2 ;
                     DIG 2 ;
                     GET 7 ;
                     PUSH nat 0 ;
                     DUP 4 ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 7 ;
                     SWAP ;
                     DUP 2 ;
                     DIG 2 ;
                     GET 17 ;
                     DUP 4 ;
                     GET 3 ;
                     DUP 4 ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 17 ;
                     SWAP ;
                     DUP 3 ;
                     GET 5 ;
                     IF_NONE
                       {}
                       { DUP 3 ;
                         DIG 3 ;
                         GET 15 ;
                         DIG 2 ;
                         DUP 4 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 15 ;
                         SWAP } ;
                     DUP 2 ;
                     PUSH nat 1 ;
                     DUP 3 ;
                     DIG 4 ;
                     GET 5 ;
                     DUP 2 ;
                     DUP 2 ;
                     COMPARE ;
                     GT ;
                     IF { SWAP ; DROP } { DROP } ;
                     ADD ;
                     UPDATE 5 ;
                     SWAP ;
                     NIL operation ;
                     DUP 3 ;
                     UNIT ;
                     RIGHT unit ;
                     LEFT (or unit unit) ;
                     LEFT unit ;
                     PAIR ;
                     DIG 5 ;
                     SWAP ;
                     EXEC ;
                     ITER { CONTRACT %create_hook
                              (pair (map %token_metadata string bytes)
                                    (nat %max_supply)
                                    (option %royalties (pair (nat %total_shares) (map %shares address nat)))
                                    (option %token_id nat)) ;
                            IF_NONE { PUSH string "FA_CREATE_HOOK_UNDEFINED" ; FAILWITH } {} ;
                            PUSH mutez 0 ;
                            DUP 6 ;
                            TRANSFER_TOKENS ;
                            CONS } ;
                     DIG 3 ;
                     CAR ;
                     SOME ;
                     DIG 2 ;
                     PAIR ;
                     EMIT %token_metadata_update
                       (pair (nat %token_id) (option %new_metadata (map string bytes))) } ;
                 CONS } }
           { IF_LEFT
               { DIG 5 ;
                 DIG 6 ;
                 DROP 2 ;
                 IF_LEFT
                   { SWAP ;
                     PUSH string "FA2_INVALID_MINTER_ACCESS" ;
                     DUP 2 ;
                     UNIT ;
                     LEFT unit ;
                     RIGHT (or unit unit) ;
                     SENDER ;
                     PAIR ;
                     DIG 6 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     EXEC ;
                     IF { DROP } { FAILWITH } ;
                     DUP ;
                     DUP 3 ;
                     GET 3 ;
                     PAIR ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP 2 ;
                     GET 4 ;
                     DUP 2 ;
                     DUP 4 ;
                     GET 3 ;
                     DUP 5 ;
                     CAR ;
                     PAIR 3 ;
                     DIG 5 ;
                     SWAP ;
                     EXEC ;
                     ADD ;
                     DUP 2 ;
                     DIG 2 ;
                     GET 9 ;
                     DUP 3 ;
                     SOME ;
                     DUP 5 ;
                     GET 3 ;
                     DUP 6 ;
                     CAR ;
                     PAIR ;
                     UPDATE ;
                     UPDATE 9 ;
                     SWAP ;
                     DUP 3 ;
                     GET 4 ;
                     DUP 3 ;
                     DUP 5 ;
                     GET 3 ;
                     PAIR ;
                     DIG 6 ;
                     SWAP ;
                     EXEC ;
                     ADD ;
                     DUP 3 ;
                     DIG 3 ;
                     GET 7 ;
                     DUP 3 ;
                     SOME ;
                     DUP 6 ;
                     GET 3 ;
                     UPDATE ;
                     UPDATE 7 ;
                     DUG 2 ;
                     DUP 3 ;
                     DUP 5 ;
                     GET 3 ;
                     SWAP ;
                     GET 17 ;
                     SWAP ;
                     GET ;
                     IF_NONE { PUSH nat 0 } {} ;
                     PUSH nat 0 ;
                     DUP 2 ;
                     COMPARE ;
                     GT ;
                     IF { DUP 2 ;
                          COMPARE ;
                          LE ;
                          IF {} { PUSH string "FA2_MAX_SUPPLY_EXCEEDED" ; FAILWITH } }
                        { DROP } ;
                     NIL operation ;
                     DUP 4 ;
                     UNIT ;
                     RIGHT unit ;
                     RIGHT (or unit unit) ;
                     LEFT unit ;
                     PAIR ;
                     DIG 6 ;
                     SWAP ;
                     EXEC ;
                     ITER { CONTRACT %mint_hook (pair (address %owner) (nat %token_id) (nat %amount)) ;
                            IF_NONE { PUSH string "FA_MINT_HOOK_UNDEFINED" ; FAILWITH } {} ;
                            PUSH mutez 0 ;
                            DUP 7 ;
                            TRANSFER_TOKENS ;
                            CONS } ;
                     DUP 5 ;
                     GET 4 ;
                     INT ;
                     DIG 2 ;
                     DUP 6 ;
                     GET 3 ;
                     NIL (pair address int) ;
                     DUP 8 ;
                     GET 4 ;
                     INT ;
                     DUP 9 ;
                     CAR ;
                     PAIR ;
                     CONS ;
                     PAIR 4 ;
                     EMIT %total_supply_update
                       (pair (list (pair (address %owner) (int %owner_diff)))
                             (nat %token_id)
                             (nat %new_total_supply)
                             (int %diff)) ;
                     CONS ;
                     DUP 4 ;
                     GET 4 ;
                     INT ;
                     DIG 2 ;
                     DUP 5 ;
                     GET 3 ;
                     DIG 5 ;
                     CAR ;
                     PAIR 4 ;
                     EMIT %balance_update
                       (pair (address %owner) (nat %token_id) (nat %new_balance) (int %diff)) ;
                     CONS }
                   { DIG 4 ;
                     DIG 5 ;
                     DIG 6 ;
                     DROP 3 ;
                     IF_LEFT
                       { DIG 2 ;
                         DROP ;
                         IF_LEFT
                           { DIG 2 ;
                             DROP ;
                             SWAP ;
                             PUSH string "FA2_INVALID_OWNER_ACCESS" ;
                             DUP 2 ;
                             SENDER ;
                             SWAP ;
                             GET 3 ;
                             SWAP ;
                             SELF_ADDRESS ;
                             PAIR ;
                             VIEW "is_owner" bool ;
                             IF_NONE { PUSH bool False } {} ;
                             IF { DROP } { FAILWITH } ;
                             EMPTY_BIG_MAP string bytes ;
                             UPDATE 1 ;
                             SWAP ;
                             ITER { UNPAIR ;
                                    DUP 3 ;
                                    DIG 3 ;
                                    CAR ;
                                    DIG 3 ;
                                    DIG 3 ;
                                    SWAP ;
                                    SOME ;
                                    SWAP ;
                                    UPDATE ;
                                    UPDATE 1 } }
                           { SWAP ;
                             PUSH string "FA2_INVALID_ROYALTIES_MANAGER_ACCESS" ;
                             DUP 2 ;
                             UNIT ;
                             RIGHT unit ;
                             RIGHT (or unit unit) ;
                             SENDER ;
                             PAIR ;
                             DIG 5 ;
                             SWAP ;
                             EXEC ;
                             SWAP ;
                             EXEC ;
                             IF { DROP } { FAILWITH } ;
                             SWAP ;
                             UPDATE 18 } ;
                         NIL operation }
                       { IF_LEFT
                           { SWAP ;
                             PUSH string "FA2_INVALID_METADATA_MANAGER_ACCESS" ;
                             DUP 2 ;
                             UNIT ;
                             RIGHT unit ;
                             LEFT (or unit unit) ;
                             SENDER ;
                             PAIR ;
                             DIG 6 ;
                             SWAP ;
                             EXEC ;
                             SWAP ;
                             EXEC ;
                             IF { DROP } { FAILWITH } ;
                             NIL operation ;
                             DUP 3 ;
                             ITER { UNPAIR ;
                                    DUP 4 ;
                                    DIG 4 ;
                                    GET 13 ;
                                    DUP 4 ;
                                    DUP 4 ;
                                    PAIR ;
                                    SOME ;
                                    DUP 4 ;
                                    UPDATE ;
                                    UPDATE 13 ;
                                    DUG 3 ;
                                    DUG 2 ;
                                    SOME ;
                                    DIG 2 ;
                                    PAIR ;
                                    EMIT %token_metadata_update
                                      (pair (nat %token_id) (option %new_metadata (map string bytes))) ;
                                    CONS } ;
                             DUP 2 ;
                             UNIT ;
                             LEFT unit ;
                             RIGHT (or unit unit) ;
                             LEFT unit ;
                             PAIR ;
                             DIG 4 ;
                             SWAP ;
                             EXEC ;
                             ITER { CONTRACT %update_metadata_hook (map nat (map string bytes)) ;
                                    IF_NONE { PUSH string "FA_UPDATE_METADATA_HOOK_UNDEFINED" ; FAILWITH } {} ;
                                    PUSH mutez 0 ;
                                    DUP 5 ;
                                    TRANSFER_TOKENS ;
                                    CONS } ;
                             DIG 2 ;
                             DROP }
                           { DIG 2 ;
                             DROP ;
                             SWAP ;
                             PUSH string "FA2_INVALID_ROYALTIES_MANAGER_ACCESS" ;
                             DUP 2 ;
                             UNIT ;
                             RIGHT unit ;
                             RIGHT (or unit unit) ;
                             SENDER ;
                             PAIR ;
                             DIG 5 ;
                             SWAP ;
                             EXEC ;
                             SWAP ;
                             EXEC ;
                             IF { DROP } { FAILWITH } ;
                             NIL operation ;
                             DIG 2 ;
                             ITER { UNPAIR ;
                                    DUP 4 ;
                                    DIG 4 ;
                                    GET 15 ;
                                    DUP 4 ;
                                    SOME ;
                                    DUP 4 ;
                                    UPDATE ;
                                    UPDATE 15 ;
                                    DUG 3 ;
                                    DUG 2 ;
                                    SOME ;
                                    DIG 2 ;
                                    PAIR ;
                                    EMIT %token_royalties_update
                                      (pair (nat %token_id)
                                            (option %new_royalties (pair (nat %total_shares) (map %shares address nat)))) ;
                                    CONS } } } } }
               { DIG 3 ;
                 DIG 8 ;
                 DROP 2 ;
                 IF_LEFT
                   { DIG 4 ;
                     DROP ;
                     SWAP ;
                     EMPTY_MAP (pair address nat) nat ;
                     NIL operation ;
                     DUP 4 ;
                     ITER { DUP ;
                            CDR ;
                            ITER { DUP 5 ;
                                   DUP 2 ;
                                   GET 3 ;
                                   SENDER ;
                                   DUP 5 ;
                                   CAR ;
                                   PAIR 4 ;
                                   DUP 10 ;
                                   SWAP ;
                                   EXEC ;
                                   DROP ;
                                   DUP 5 ;
                                   DUP 2 ;
                                   GET 3 ;
                                   PAIR ;
                                   DUP 9 ;
                                   SWAP ;
                                   EXEC ;
                                   DROP ;
                                   DUP 5 ;
                                   DUP 2 ;
                                   GET 3 ;
                                   DUP 4 ;
                                   CAR ;
                                   PAIR 3 ;
                                   DUP 11 ;
                                   SWAP ;
                                   EXEC ;
                                   DUP 2 ;
                                   GET 4 ;
                                   DUP 2 ;
                                   COMPARE ;
                                   GE ;
                                   IF {} { PUSH string "FA2_INSUFFICIENT_BALANCE" ; FAILWITH } ;
                                   PUSH bool False ;
                                   DUP 6 ;
                                   DUP 4 ;
                                   GET 3 ;
                                   DUP 6 ;
                                   CAR ;
                                   PAIR ;
                                   MEM ;
                                   COMPARE ;
                                   EQ ;
                                   IF { DIG 4 ;
                                        DUP 2 ;
                                        DUP 4 ;
                                        GET 3 ;
                                        DUP 6 ;
                                        CAR ;
                                        PAIR ;
                                        SWAP ;
                                        SOME ;
                                        SWAP ;
                                        UPDATE ;
                                        DUG 4 }
                                      {} ;
                                   DUP 6 ;
                                   DIG 6 ;
                                   GET 9 ;
                                   DUP 4 ;
                                   GET 4 ;
                                   DIG 3 ;
                                   SUB ;
                                   ISNAT ;
                                   DUP 4 ;
                                   GET 3 ;
                                   DUP 6 ;
                                   CAR ;
                                   PAIR ;
                                   UPDATE ;
                                   UPDATE 9 ;
                                   DUG 4 ;
                                   DUP 5 ;
                                   DUP 2 ;
                                   GET 3 ;
                                   DUP 3 ;
                                   CAR ;
                                   PAIR 3 ;
                                   DUP 11 ;
                                   SWAP ;
                                   EXEC ;
                                   PUSH bool False ;
                                   DUP 6 ;
                                   DUP 4 ;
                                   GET 3 ;
                                   DUP 5 ;
                                   CAR ;
                                   PAIR ;
                                   MEM ;
                                   COMPARE ;
                                   EQ ;
                                   IF { DIG 4 ;
                                        DUP 2 ;
                                        DUP 4 ;
                                        GET 3 ;
                                        DUP 5 ;
                                        CAR ;
                                        PAIR ;
                                        SWAP ;
                                        SOME ;
                                        SWAP ;
                                        UPDATE ;
                                        DUG 4 }
                                      {} ;
                                   DUP 6 ;
                                   DIG 6 ;
                                   GET 9 ;
                                   DUP 4 ;
                                   GET 4 ;
                                   DIG 3 ;
                                   ADD ;
                                   SOME ;
                                   DUP 4 ;
                                   GET 3 ;
                                   DUP 5 ;
                                   CAR ;
                                   PAIR ;
                                   UPDATE ;
                                   UPDATE 9 ;
                                   DUG 4 ;
                                   DIG 2 ;
                                   DUP 2 ;
                                   GET 4 ;
                                   DUP 3 ;
                                   GET 3 ;
                                   DIG 3 ;
                                   CAR ;
                                   DUP 5 ;
                                   CAR ;
                                   PAIR 4 ;
                                   EMIT %transfer_event
                                     (pair (address %from_) (address %to_) (nat %token_id) (nat %amount)) ;
                                   CONS ;
                                   SWAP } ;
                            DROP } ;
                     DIG 5 ;
                     DIG 6 ;
                     DROP 2 ;
                     DUP 3 ;
                     UNIT ;
                     RIGHT (or (or unit unit) (or unit unit)) ;
                     PAIR ;
                     DIG 5 ;
                     SWAP ;
                     EXEC ;
                     ITER { CONTRACT %transfer_hook
                              (list (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount))))) ;
                            IF_NONE { PUSH string "FA_TRANSFER_HOOK_UNDEFINED" ; FAILWITH } {} ;
                            PUSH mutez 0 ;
                            DUP 6 ;
                            TRANSFER_TOKENS ;
                            CONS } ;
                     DIG 3 ;
                     DROP ;
                     SWAP ;
                     ITER { UNPAIR ;
                            UNPAIR ;
                            DUP 5 ;
                            DUP 3 ;
                            DUP 3 ;
                            PAIR 3 ;
                            DUP 7 ;
                            SWAP ;
                            EXEC ;
                            DIG 3 ;
                            DUP 2 ;
                            SUB ;
                            SWAP ;
                            DIG 3 ;
                            DIG 3 ;
                            PAIR 4 ;
                            EMIT %balance_update
                              (pair (address %owner) (nat %token_id) (nat %new_balance) (int %diff)) ;
                            CONS } ;
                     DIG 2 ;
                     DROP }
                   { DIG 2 ;
                     DIG 5 ;
                     DIG 6 ;
                     DROP 3 ;
                     SWAP ;
                     NIL operation ;
                     DIG 2 ;
                     ITER { IF_LEFT
                              { DUP 3 ;
                                DUP 2 ;
                                GET 4 ;
                                PAIR ;
                                DUP 5 ;
                                SWAP ;
                                EXEC ;
                                DROP ;
                                PUSH string "FA2_NOT_OWNER" ;
                                DUP 2 ;
                                CAR ;
                                PAIR ;
                                DUP 6 ;
                                SWAP ;
                                EXEC ;
                                DROP ;
                                DUP 3 ;
                                DIG 3 ;
                                GET 11 ;
                                UNIT ;
                                SOME ;
                                DUP 4 ;
                                GET 4 ;
                                DUP 5 ;
                                GET 3 ;
                                PAIR ;
                                DUP 5 ;
                                CAR ;
                                PAIR ;
                                UPDATE ;
                                UPDATE 11 ;
                                DUG 2 ;
                                SWAP ;
                                PUSH bool True ;
                                DUP 3 ;
                                GET 4 ;
                                DUP 4 ;
                                GET 3 ;
                                DIG 4 ;
                                CAR ;
                                PAIR 4 ;
                                EMIT %operator_update
                                  (pair (address %owner) (address %operator) (nat %token_id) (bool %is_operator)) }
                              { DUP 3 ;
                                DUP 2 ;
                                GET 4 ;
                                PAIR ;
                                DUP 5 ;
                                SWAP ;
                                EXEC ;
                                DROP ;
                                PUSH string "FA2_NOT_OWNER" ;
                                DUP 2 ;
                                CAR ;
                                PAIR ;
                                DUP 6 ;
                                SWAP ;
                                EXEC ;
                                DROP ;
                                DUP 3 ;
                                DIG 3 ;
                                GET 11 ;
                                DUP 3 ;
                                GET 4 ;
                                DUP 4 ;
                                GET 3 ;
                                PAIR ;
                                DUP 4 ;
                                CAR ;
                                PAIR ;
                                NONE unit ;
                                SWAP ;
                                UPDATE ;
                                UPDATE 11 ;
                                DUG 2 ;
                                SWAP ;
                                PUSH bool False ;
                                DUP 3 ;
                                GET 4 ;
                                DUP 4 ;
                                GET 3 ;
                                DIG 4 ;
                                CAR ;
                                PAIR 4 ;
                                EMIT %operator_update
                                  (pair (address %owner) (address %operator) (nat %token_id) (bool %is_operator)) } ;
                            CONS } ;
                     DIG 2 ;
                     DIG 3 ;
                     DROP 2 } } } ;
         PAIR } ;
  view "get_protocol" unit address { CDR ; GET 3 } ;
  view "get_owner"
       unit
       address
       { CDR ;
         GET 3 ;
         SELF_ADDRESS ;
         VIEW "get_owner" address ;
         IF_NONE { PUSH address "tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU" } {} } ;
  view "is_owner"
       address
       bool
       { UNPAIR ;
         SWAP ;
         GET 3 ;
         SWAP ;
         SELF_ADDRESS ;
         PAIR ;
         VIEW "is_owner" bool ;
         IF_NONE { PUSH bool False } {} } ;
  view "has_role"
       (pair address
             (or (or (unit %creator) (unit %metadata_manager))
                 (or (unit %minter) (unit %royalties_manager))))
       bool
       { UNPAIR ;
         UNPAIR ;
         DIG 2 ;
         GET 3 ;
         DUG 2 ;
         SELF_ADDRESS ;
         PAIR ;
         PAIR ;
         VIEW "has_role" bool ;
         IF_NONE { PUSH bool False } {} } ;
  view "get_hooks"
       (or (or (or (unit %burn_hook) (unit %create_hook))
               (or (unit %metadata_hook) (unit %mint_hook)))
           (unit %transfer_hook))
       (set address)
       { UNPAIR ;
         SWAP ;
         GET 3 ;
         SWAP ;
         SELF_ADDRESS ;
         PAIR ;
         VIEW "get_hooks" (set address) ;
         IF_NONE { EMPTY_SET address } {} } ;
  view "is_hook"
       (pair address
             (or (or (or (unit %burn_hook) (unit %create_hook))
                     (or (unit %metadata_hook) (unit %mint_hook)))
                 (unit %transfer_hook)))
       bool
       { UNPAIR ;
         UNPAIR ;
         DIG 2 ;
         GET 3 ;
         DIG 2 ;
         SELF_ADDRESS ;
         PAIR ;
         VIEW "get_hooks" (set address) ;
         IF_NONE { EMPTY_SET address } {} ;
         SWAP ;
         MEM } ;
  view "next_token_id" unit nat { CDR ; GET 5 } ;
  view "get_balance"
       (pair (address %owner) (nat %token_id))
       nat
       { UNPAIR ; SWAP ; GET 9 ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
  view "get_total_supply"
       nat
       nat
       { UNPAIR ; SWAP ; GET 7 ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
  view "get_max_supply"
       nat
       nat
       { UNPAIR ; SWAP ; GET 17 ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
  view "is_operator"
       (pair (address %owner) (address %operator) (nat %token_id))
       bool
       { UNPAIR ;
         DUP ;
         GET 3 ;
         DUP 2 ;
         CAR ;
         DIG 3 ;
         GET 11 ;
         DIG 3 ;
         GET 4 ;
         DUP 4 ;
         PAIR ;
         DUP 3 ;
         PAIR ;
         MEM ;
         DUG 2 ;
         COMPARE ;
         EQ ;
         OR } ;
  view "get_token_metadata"
       nat
       (map string bytes)
       { UNPAIR ;
         SWAP ;
         GET 13 ;
         SWAP ;
         GET ;
         IF_NONE { EMPTY_MAP string bytes } { CDR } } ;
  view "is_token" nat bool { UNPAIR ; SWAP ; GET 7 ; SWAP ; MEM } ;
  view "get_royalties"
       nat
       (pair (nat %total_shares) (map %shares address nat))
       { UNPAIR ;
         DUP 2 ;
         GET 15 ;
         SWAP ;
         GET ;
         IF_NONE { GET 18 } { SWAP ; DROP } } }

