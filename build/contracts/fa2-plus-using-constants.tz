{ parameter
    (or (or (or (or (or %assets
                       (or (list %assert_balances (pair (address %owner) (nat %token_id) (nat %balance)))
                           (pair %balance_of
                              (list %requests (pair (address %owner) (nat %token_id)))
                              (contract %callback
                                 (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))))
                       (or (list %transfer
                              (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount)))))
                           (list %update_operators
                              (or (pair %add_operator (address %owner) (address %operator) (nat %token_id))
                                  (pair %remove_operator (address %owner) (address %operator) (nat %token_id))))))
                    (list %burn (pair (address %owner) (nat %token_id) (nat %amount))))
                (or (unit %confirm_ownership)
                    (pair %create
                       (pair %token_metadata (nat %token_id) (map %token_info string bytes))
                       (pair %royalties (nat %total_shares) (map %shares address nat)))))
            (or (or (list %internal_transfer_hook
                       (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount)))))
                    (list %mint (pair (address %owner) (nat %token_id) (nat %amount))))
                (or (list %renounce_roles
                       (or (or (or (unit %renounce_creator) (unit %renounce_metadata_manager))
                               (or (unit %renounce_minter) (unit %renounce_ownership)))
                           (unit %renounce_royalties_manager)))
                    (address %transfer_ownership))))
        (or (or (pair %update_default_royalties (nat %total_shares) (map %shares address nat))
                (map %update_metadata nat (pair (nat %token_id) (map %token_info string bytes))))
            (or (list %update_roles
                   (or (or (or (or (address %add_creator) (address %add_metadata_manager))
                               (or (address %add_minter) (address %add_royalties_manager)))
                           (or (or (address %add_transfer_hook) (address %remove_creator))
                               (or (address %remove_metadata_manager) (address %remove_minter))))
                       (or (address %remove_royalties_manager) (address %remove_transfer_hook))))
                (map %update_royalties nat (pair (nat %total_shares) (map %shares address nat)))))) ;
  storage
    (pair (big_map %metadata string bytes)
          (pair %roles
             (address %owner)
             (option %pending_owner address)
             (set %creator address)
             (set %minter address)
             (set %metadata_manager address)
             (set %royalties_manager address)
             (set %transfer_hook address))
          (pair %assets
             (nat %next_token_id)
             (big_map %token_total_supply nat nat)
             (big_map %ledger (pair address nat) nat)
             (big_map %operators (pair address address nat) unit)
             (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
             (big_map %royalties nat (pair (nat %total_shares) (map %shares address nat))))
          (pair %default_royalties (nat %total_shares) (map %shares address nat))) ;
  code { UNPAIR ;
         SWAP ;
         PUSH string "FA2_DONT_SEND_TEZ" ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         EQ ;
         IF { DROP } { FAILWITH } ;
         SWAP ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { IF_LEFT
                       { DUP 2 ;
                         GET 5 ;
                         SWAP ;
                         IF_LEFT
                           { IF_LEFT
                               { PAIR ; constant "exprvRgGuJMvLwq8Md7T9yNjd7mHQFMeeJZYWAqNijVWdMapMZfsiT" }
                               { PAIR ; constant "exprv7Poi6dBzxoHe5SBiHXynjG2onFGABGf2o1UzjFVRjAuCY1V8P" } }
                           { IF_LEFT
                               { PAIR ; constant "exprv4kvcKTSCUszCEALnwFuwEA5qbgFwNx2m31YpW532icu9c5SqA" }
                               { PAIR ; constant "expruEJ9gH42pz4WzGajmtA4UZrR7Kk9fVJbg3GAcMSQQxDyG98yr7" } } ;
                         SWAP ;
                         DUP 2 ;
                         CDR ;
                         UPDATE 5 ;
                         SWAP ;
                         CAR ;
                         PAIR }
                       { PAIR ; constant "exprv5QuqVpfpHxDySZirNyDXW5xu7sWjjkawFCG1ADfkSQSH9UBnK" } }
                   { IF_LEFT
                       { DROP ; constant "expruVbPWAVhz2QqMhBFFfSzDXuf8dRYbi6Hwy1L3WhaERoykeXLEF" }
                       { PAIR ; constant "exprvR7VMpqK6qZMxuZV7YjA213BwAQftcHw9dxTmZKBy8MZH3ijma" } } }
               { IF_LEFT
                   { IF_LEFT
                       { PAIR ; constant "expruBrh3CaMNgPkQYtoaBUEXu3GP1mSfH1GpTS4f8ucEeGJN4aFGT" }
                       { PAIR ; constant "exprtmdfMnvMYqXNasxgUSWvmCDiGcoCGay3nGWM1ZBfeZm3TXj1uL" } }
                   { IF_LEFT
                       { PAIR ; constant "exprumejcVu4H2uwFYbWR6V8uCEgygP6Tb7HRpZPYxXh18P5t6fyev" }
                       { PAIR ; constant "exprtZH8MMwU811f7n7zcB5z9htzPPR6wr83fDLnvGicFxCeRVvMBR" } } } }
           { IF_LEFT
               { IF_LEFT
                   { PAIR ; constant "exprvJf9Q9291eVmjzR9YWeLwGQe7zJtgm3aTsYN2rLKQvXENozTz8" }
                   { PAIR ; constant "exprtcanxWtd21U8mXNbDYwgDoSA6hWcbbAvn5Y8ZpK9LmWB4u8ev7" } }
               { IF_LEFT
                   { PAIR ; constant "exprufmDLCvhJK7qcj3DYqguxk7mau2t4qrEfj1cDqCAbmLHLdi8dg" }
                   { PAIR ; constant "exprts8V2EAaSpMUP4wsN8gV3Prm4vud34opVbaPCSoqhaz7HECBhx" } } } } ;
  view "get_owner" unit address { CDR ; GET 3 ; CAR } ;
  view "is_owner"
       address
       bool
       { UNPAIR ; SWAP ; GET 3 ; CAR ; SWAP ; COMPARE ; EQ } ;
  view "is_creator" address bool { UNPAIR ; SWAP ; GET 3 ; GET 5 ; SWAP ; MEM } ;
  view "is_minter" address bool { UNPAIR ; SWAP ; GET 3 ; GET 7 ; SWAP ; MEM } ;
  view "is_metadata_manager"
       address
       bool
       { UNPAIR ; SWAP ; GET 3 ; GET 9 ; SWAP ; MEM } ;
  view "is_royalties_manager"
       address
       bool
       { UNPAIR ; SWAP ; GET 3 ; GET 11 ; SWAP ; MEM } ;
  view "next_token_id" unit nat { CDR ; GET 5 ; CAR } ;
  view "get_balance"
       (pair (address %owner) (nat %token_id))
       nat
       { UNPAIR ;
         SWAP ;
         GET 5 ;
         GET 5 ;
         DUP 2 ;
         CDR ;
         DIG 2 ;
         CAR ;
         PAIR ;
         GET ;
         IF_NONE { PUSH nat 0 } {} } ;
  view "total_supply"
       nat
       nat
       { UNPAIR ;
         SWAP ;
         GET 5 ;
         GET 3 ;
         SWAP ;
         GET ;
         IF_NONE { PUSH nat 0 } {} } ;
  view "is_operator"
       (pair (address %owner) (address %operator) (nat %token_id))
       bool
       { UNPAIR ;
         DUP ;
         GET 3 ;
         DUP 2 ;
         CAR ;
         DIG 3 ;
         GET 5 ;
         GET 7 ;
         DIG 3 ;
         GET 4 ;
         DUP 4 ;
         PAIR ;
         DUP 3 ;
         PAIR ;
         MEM ;
         DUG 2 ;
         COMPARE ;
         EQ ;
         OR } ;
  view "get_royalties"
       nat
       (pair (nat %total_shares) (map %shares address nat))
       { UNPAIR ;
         DUP 2 ;
         GET 5 ;
         GET 10 ;
         SWAP ;
         GET ;
         IF_NONE { GET 6 } { SWAP ; DROP } } }

