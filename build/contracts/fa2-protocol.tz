{ parameter
    (or (or (or (address %confirm_ownership) (map %init string bytes))
            (or (pair %migrate_to_protocol (address %fa2_address) (address %new_protocol))
                (list %renounce_roles
                   (pair address
                         (or (or (or (unit %creator) (unit %metadata_manager)) (or (unit %minter) (unit %ownership)))
                             (unit %royalties_manager))))))
        (or (or (pair %transfer_ownership address address)
                (list %update_hooks
                   (pair address
                         (or (pair %add
                                (or (or (or (unit %burn_hook) (unit %create_hook))
                                        (or (unit %metadata_hook) (unit %mint_hook)))
                                    (unit %transfer_hook))
                                address)
                             (pair %remove
                                (or (or (or (unit %burn_hook) (unit %create_hook))
                                        (or (unit %metadata_hook) (unit %mint_hook)))
                                    (unit %transfer_hook))
                                address)))))
            (list %update_roles
               (pair address
                     (or (pair %add
                            (or (or (unit %creator) (unit %metadata_manager))
                                (or (unit %minter) (unit %royalties_manager)))
                            address)
                         (pair %remove
                            (or (or (unit %creator) (unit %metadata_manager))
                                (or (unit %minter) (unit %royalties_manager)))
                            address)))))) ;
  storage
    (pair (big_map %metadata string bytes)
          (big_map %roles
             address
             (pair (address %owner)
                   (option %pending_owner address)
                   (set %creator address)
                   (set %minter address)
                   (set %metadata_manager address)
                   (set %royalties_manager address)))
          (big_map %hooks
             address
             (pair (map %transfer address bool)
                   (map %create address bool)
                   (map %mint address bool)
                   (map %burn address bool)
                   (map %update_metadata address bool)))
          (pair %protocol_hooks
             (set %transfer address)
             (set %create address)
             (set %mint address)
             (set %burn address)
             (set %update_metadata address))) ;
  code { NIL operation ;
         LAMBDA
           (pair address
                 (big_map string bytes)
                 (big_map
                    address
                    (pair address (option address) (set address) (set address) (set address) (set address)))
                 (big_map
                    address
                    (pair (map address bool)
                          (map address bool)
                          (map address bool)
                          (map address bool)
                          (map address bool)))
                 (pair (set address) (set address) (set address) (set address) (set address)))
           (pair address (option address) (set address) (set address) (set address) (set address))
           { UNPAIR ;
             SWAP ;
             GET 3 ;
             SWAP ;
             GET ;
             IF_NONE { PUSH string "FA_INVALID_TOKEN" ; FAILWITH } {} } ;
         LAMBDA
           (pair address
                 (big_map string bytes)
                 (big_map
                    address
                    (pair address (option address) (set address) (set address) (set address) (set address)))
                 (big_map
                    address
                    (pair (map address bool)
                          (map address bool)
                          (map address bool)
                          (map address bool)
                          (map address bool)))
                 (pair (set address) (set address) (set address) (set address) (set address)))
           (pair (map address bool)
                 (map address bool)
                 (map address bool)
                 (map address bool)
                 (map address bool))
           { UNPAIR ;
             SWAP ;
             GET 5 ;
             SWAP ;
             GET ;
             IF_NONE
               { EMPTY_MAP address bool ;
                 EMPTY_MAP address bool ;
                 EMPTY_MAP address bool ;
                 EMPTY_MAP address bool ;
                 EMPTY_MAP address bool ;
                 PAIR 5 }
               {} } ;
         LAMBDA
           (pair address address)
           (lambda
              (pair (big_map string bytes)
                    (big_map
                       address
                       (pair address (option address) (set address) (set address) (set address) (set address)))
                    (big_map
                       address
                       (pair (map address bool)
                             (map address bool)
                             (map address bool)
                             (map address bool)
                             (map address bool)))
                    (pair (set address) (set address) (set address) (set address) (set address)))
              bool)
           { UNPAIR ;
             LAMBDA
               (pair (pair address address)
                     (pair (big_map string bytes)
                           (big_map
                              address
                              (pair address (option address) (set address) (set address) (set address) (set address)))
                           (big_map
                              address
                              (pair (map address bool)
                                    (map address bool)
                                    (map address bool)
                                    (map address bool)
                                    (map address bool)))
                           (pair (set address) (set address) (set address) (set address) (set address))))
               bool
               { UNPAIR ;
                 UNPAIR ;
                 DIG 2 ;
                 GET 3 ;
                 SWAP ;
                 GET ;
                 IF_NONE { DROP ; PUSH bool False } { CAR ; COMPARE ; EQ } } ;
             DUP 3 ;
             DUP 3 ;
             PAIR ;
             APPLY ;
             SWAP ;
             DIG 2 ;
             DROP 2 } ;
         LAMBDA
           (pair (pair address address) (or (or unit unit) (or unit unit)))
           (lambda
              (pair (big_map string bytes)
                    (big_map
                       address
                       (pair address (option address) (set address) (set address) (set address) (set address)))
                    (big_map
                       address
                       (pair (map address bool)
                             (map address bool)
                             (map address bool)
                             (map address bool)
                             (map address bool)))
                    (pair (set address) (set address) (set address) (set address) (set address)))
              bool)
           { UNPAIR ;
             UNPAIR ;
             LAMBDA
               (pair (pair address address (or (or unit unit) (or unit unit)))
                     (pair (big_map string bytes)
                           (big_map
                              address
                              (pair address (option address) (set address) (set address) (set address) (set address)))
                           (big_map
                              address
                              (pair (map address bool)
                                    (map address bool)
                                    (map address bool)
                                    (map address bool)
                                    (map address bool)))
                           (pair (set address) (set address) (set address) (set address) (set address))))
               bool
               { UNPAIR ;
                 UNPAIR 3 ;
                 DIG 3 ;
                 GET 3 ;
                 SWAP ;
                 GET ;
                 IF_NONE
                   { DROP 2 ; PUSH bool False }
                   { DIG 2 ;
                     IF_LEFT
                       { IF_LEFT { DROP ; GET 5 ; SWAP ; MEM } { DROP ; GET 9 ; SWAP ; MEM } }
                       { IF_LEFT { DROP ; GET 7 ; SWAP ; MEM } { DROP ; GET 10 ; SWAP ; MEM } } } } ;
             DUP 4 ;
             DUP 4 ;
             DUP 4 ;
             PAIR 3 ;
             APPLY ;
             SWAP ;
             DIG 2 ;
             DIG 3 ;
             DROP 3 } ;
         DIG 5 ;
         UNPAIR ;
         PUSH string "FA2_DONT_SEND_TEZ" ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         EQ ;
         IF { DROP } { FAILWITH } ;
         IF_LEFT
           { IF_LEFT
               { DIG 2 ;
                 DIG 3 ;
                 DIG 4 ;
                 DROP 3 ;
                 IF_LEFT
                   { SWAP ;
                     DUP ;
                     DUP 3 ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     DUP ;
                     GET 3 ;
                     IF_NONE { PUSH string "FA2_NO_PENDING_OWNER" ; FAILWITH } {} ;
                     PUSH string "FA2_INVALID_PENDING_OWNER_ACCESS" ;
                     DUP 2 ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     IF { DROP } { FAILWITH } ;
                     DUP 3 ;
                     DIG 3 ;
                     GET 3 ;
                     DIG 3 ;
                     DIG 3 ;
                     UPDATE 1 ;
                     NONE address ;
                     UPDATE 3 ;
                     SOME ;
                     DIG 3 ;
                     UPDATE ;
                     UPDATE 3 ;
                     SWAP }
                   { DIG 2 ;
                     DIG 3 ;
                     DROP 2 ;
                     SWAP ;
                     SENDER ;
                     EMPTY_MAP address nat ;
                     PUSH nat 0 ;
                     PAIR ;
                     EMPTY_BIG_MAP nat nat ;
                     EMPTY_BIG_MAP nat (pair nat (map address nat)) ;
                     EMPTY_BIG_MAP nat (pair nat (map string bytes)) ;
                     EMPTY_BIG_MAP (pair address address nat) unit ;
                     EMPTY_BIG_MAP (pair address nat) nat ;
                     EMPTY_BIG_MAP nat nat ;
                     PUSH nat 0 ;
                     SELF_ADDRESS ;
                     EMPTY_BIG_MAP string bytes ;
                     PAIR 10 ;
                     DIG 3 ;
                     ITER { UNPAIR ;
                            DUP 3 ;
                            DIG 3 ;
                            CAR ;
                            DIG 3 ;
                            DIG 3 ;
                            SWAP ;
                            SOME ;
                            SWAP ;
                            UPDATE ;
                            UPDATE 1 } ;
                     PUSH mutez 0 ;
                     NONE key_hash ;
                     PAIR ;
                     PAIR ;
                     UNPPAIIR ;
                     CREATE_CONTRACT
                       { parameter
                           (or (or (or (list %assert_balances (pair (address %owner) (nat %token_id) (nat %balance)))
                                       (pair %balance_of
                                          (list %requests (pair (address %owner) (nat %token_id)))
                                          (contract %callback
                                             (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))))
                                   (or (pair %burn (address %owner) (nat %token_id) (nat %amount))
                                       (pair %create
                                          (map %token_metadata string bytes)
                                          (nat %max_supply)
                                          (option %royalties (pair (nat %total_shares) (map %shares address nat)))
                                          (option %token_id nat))))
                               (or (or (pair %mint (address %owner) (nat %token_id) (nat %amount))
                                       (or %privileged_action
                                          (or (or (map %update_contract_metadata string bytes)
                                                  (pair %update_default_royalties (nat %total_shares) (map %shares address nat)))
                                              (or (map %update_metadata nat (map string bytes)) (address %update_protocol)))
                                          (map %update_royalties nat (pair (nat %total_shares) (map %shares address nat)))))
                                   (or (list %transfer
                                          (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount)))))
                                       (list %update_operators
                                          (or (pair %add_operator (address %owner) (address %operator) (nat %token_id))
                                              (pair %remove_operator (address %owner) (address %operator) (nat %token_id))))))) ;
                         storage
                           (pair (big_map %metadata string bytes)
                                 (address %protocol)
                                 (nat %next_token_id)
                                 (big_map %token_total_supply nat nat)
                                 (big_map %ledger (pair address nat) nat)
                                 (big_map %operators (pair address address nat) unit)
                                 (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
                                 (big_map %royalties nat (pair (nat %total_shares) (map %shares address nat)))
                                 (big_map %token_max_supply nat nat)
                                 (pair %default_royalties (nat %total_shares) (map %shares address nat))) ;
                         code { constant "exprumUMxeKBZPR51zXBbgWXejSgyF1njC4RP66vsT6D3SGbSwZopC" } ;
                         view "get_protocol" unit address { CDR ; GET 3 } ;
                         view "get_owner"
                              unit
                              address
                              { CDR ;
                                GET 3 ;
                                SELF_ADDRESS ;
                                VIEW "get_owner" address ;
                                IF_NONE { PUSH address "tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU" } {} } ;
                         view "is_owner"
                              address
                              bool
                              { UNPAIR ;
                                SWAP ;
                                GET 3 ;
                                SWAP ;
                                SELF_ADDRESS ;
                                PAIR ;
                                VIEW "is_owner" bool ;
                                IF_NONE { PUSH bool False } {} } ;
                         view "has_role"
                              (pair address
                                    (or (or (unit %creator) (unit %metadata_manager))
                                        (or (unit %minter) (unit %royalties_manager))))
                              bool
                              { UNPAIR ;
                                UNPAIR ;
                                DIG 2 ;
                                GET 3 ;
                                DUG 2 ;
                                SELF_ADDRESS ;
                                PAIR ;
                                PAIR ;
                                VIEW "has_role" bool ;
                                IF_NONE { PUSH bool False } {} } ;
                         view "get_hooks"
                              (or (or (or (unit %burn_hook) (unit %create_hook))
                                      (or (unit %metadata_hook) (unit %mint_hook)))
                                  (unit %transfer_hook))
                              (set address)
                              { UNPAIR ;
                                SWAP ;
                                GET 3 ;
                                SWAP ;
                                SELF_ADDRESS ;
                                PAIR ;
                                VIEW "get_hooks" (set address) ;
                                IF_NONE { EMPTY_SET address } {} } ;
                         view "is_hook"
                              (pair address
                                    (or (or (or (unit %burn_hook) (unit %create_hook))
                                            (or (unit %metadata_hook) (unit %mint_hook)))
                                        (unit %transfer_hook)))
                              bool
                              { UNPAIR ;
                                UNPAIR ;
                                DIG 2 ;
                                GET 3 ;
                                DIG 2 ;
                                SELF_ADDRESS ;
                                PAIR ;
                                VIEW "get_hooks" (set address) ;
                                IF_NONE { EMPTY_SET address } {} ;
                                SWAP ;
                                MEM } ;
                         view "next_token_id" unit nat { CDR ; GET 5 } ;
                         view "get_balance"
                              (pair (address %owner) (nat %token_id))
                              nat
                              { UNPAIR ; SWAP ; GET 9 ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
                         view "get_total_supply"
                              nat
                              nat
                              { UNPAIR ; SWAP ; GET 7 ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
                         view "get_max_supply"
                              nat
                              nat
                              { UNPAIR ; SWAP ; GET 17 ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
                         view "is_operator"
                              (pair (address %owner) (address %operator) (nat %token_id))
                              bool
                              { UNPAIR ;
                                DUP ;
                                GET 3 ;
                                DUP 2 ;
                                CAR ;
                                DIG 3 ;
                                GET 11 ;
                                DIG 3 ;
                                GET 4 ;
                                DUP 4 ;
                                PAIR ;
                                DUP 3 ;
                                PAIR ;
                                MEM ;
                                DUG 2 ;
                                COMPARE ;
                                EQ ;
                                OR } ;
                         view "get_token_metadata"
                              nat
                              (map string bytes)
                              { UNPAIR ;
                                SWAP ;
                                GET 13 ;
                                SWAP ;
                                GET ;
                                IF_NONE { EMPTY_MAP string bytes } { CDR } } ;
                         view "is_token" nat bool { UNPAIR ; SWAP ; GET 7 ; SWAP ; MEM } ;
                         view "get_royalties"
                              nat
                              (pair (nat %total_shares) (map %shares address nat))
                              { UNPAIR ;
                                DUP 2 ;
                                GET 15 ;
                                SWAP ;
                                GET ;
                                IF_NONE { GET 18 } { SWAP ; DROP } } } ;
                     DUP 4 ;
                     DIG 4 ;
                     GET 3 ;
                     EMPTY_SET address ;
                     DUP 6 ;
                     PUSH bool True ;
                     SWAP ;
                     UPDATE ;
                     EMPTY_SET address ;
                     DUP 7 ;
                     PUSH bool True ;
                     SWAP ;
                     UPDATE ;
                     EMPTY_SET address ;
                     DUP 8 ;
                     PUSH bool True ;
                     SWAP ;
                     UPDATE ;
                     EMPTY_SET address ;
                     DUP 9 ;
                     PUSH bool True ;
                     SWAP ;
                     UPDATE ;
                     NONE address ;
                     DIG 9 ;
                     PAIR 6 ;
                     DIG 4 ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 3 ;
                     NIL operation ;
                     DIG 2 ;
                     CONS } }
               { IF_LEFT
                   { DIG 2 ;
                     DIG 6 ;
                     DROP 2 ;
                     UNPAIR ;
                     PUSH string "FA2_INVALID_OWNER_ACCESS" ;
                     DUP 4 ;
                     SENDER ;
                     DUP 4 ;
                     PAIR ;
                     DIG 6 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     EXEC ;
                     IF { DROP } { FAILWITH } ;
                     DUP 3 ;
                     DUP 2 ;
                     PAIR ;
                     DIG 5 ;
                     SWAP ;
                     EXEC ;
                     DUP 4 ;
                     DUP 3 ;
                     PAIR ;
                     DIG 5 ;
                     SWAP ;
                     EXEC ;
                     DUP 4 ;
                     CONTRACT %migrate_from_protocol
                       (pair (address %fa2_address)
                             (pair %roles
                                (address %owner)
                                (option %pending_owner address)
                                (set %creator address)
                                (set %minter address)
                                (set %metadata_manager address)
                                (set %royalties_manager address))
                             (pair %hooks
                                (map %transfer address bool)
                                (map %create address bool)
                                (map %mint address bool)
                                (map %burn address bool)
                                (map %update_metadata address bool))) ;
                     IF_NONE { PUSH string "FA_INVALID_PROTCOL_MIGRATION" ; FAILWITH } {} ;
                     DUP 4 ;
                     CONTRACT %update_protocol address ;
                     IF_NONE { PUSH string "FA_INVALID_PROTCOL_MIGRATION" ; FAILWITH } {} ;
                     NIL operation ;
                     SWAP ;
                     PUSH mutez 0 ;
                     DIG 7 ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     SWAP ;
                     PUSH mutez 0 ;
                     DIG 3 ;
                     DIG 4 ;
                     DIG 5 ;
                     PAIR 3 ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     SWAP }
                   { DIG 4 ;
                     DROP ;
                     ITER { UNPAIR ;
                            DUP 3 ;
                            DUP 2 ;
                            PAIR ;
                            DUP 7 ;
                            SWAP ;
                            EXEC ;
                            DUP 4 ;
                            DUP 5 ;
                            GET 3 ;
                            DIG 4 ;
                            IF_LEFT
                              { IF_LEFT
                                  { IF_LEFT
                                      { DROP ;
                                        PUSH string "FA2_INVALID_CREATOR_ACCESS" ;
                                        DIG 5 ;
                                        UNIT ;
                                        LEFT unit ;
                                        LEFT (or unit unit) ;
                                        SENDER ;
                                        DUP 8 ;
                                        PAIR ;
                                        PAIR ;
                                        DUP 8 ;
                                        SWAP ;
                                        EXEC ;
                                        SWAP ;
                                        EXEC ;
                                        IF { DROP } { FAILWITH } ;
                                        DUP 3 ;
                                        DIG 3 ;
                                        GET 5 ;
                                        SENDER ;
                                        PUSH bool False ;
                                        SWAP ;
                                        UPDATE ;
                                        UPDATE 5 }
                                      { DROP ;
                                        PUSH string "FA2_INVALID_METADATA_MANAGER_ACCESS" ;
                                        DIG 5 ;
                                        UNIT ;
                                        RIGHT unit ;
                                        LEFT (or unit unit) ;
                                        SENDER ;
                                        DUP 8 ;
                                        PAIR ;
                                        PAIR ;
                                        DUP 8 ;
                                        SWAP ;
                                        EXEC ;
                                        SWAP ;
                                        EXEC ;
                                        IF { DROP } { FAILWITH } ;
                                        DUP 3 ;
                                        DIG 3 ;
                                        GET 9 ;
                                        SENDER ;
                                        PUSH bool False ;
                                        SWAP ;
                                        UPDATE ;
                                        UPDATE 9 } }
                                  { IF_LEFT
                                      { DROP ;
                                        PUSH string "FA2_INVALID_MINTER_ACCESS" ;
                                        DIG 5 ;
                                        UNIT ;
                                        LEFT unit ;
                                        RIGHT (or unit unit) ;
                                        SENDER ;
                                        DUP 8 ;
                                        PAIR ;
                                        PAIR ;
                                        DUP 8 ;
                                        SWAP ;
                                        EXEC ;
                                        SWAP ;
                                        EXEC ;
                                        IF { DROP } { FAILWITH } ;
                                        DUP 3 ;
                                        DIG 3 ;
                                        GET 7 ;
                                        SENDER ;
                                        PUSH bool False ;
                                        SWAP ;
                                        UPDATE ;
                                        UPDATE 7 }
                                      { DROP ;
                                        PUSH string "FA2_INVALID_OWNER_ACCESS" ;
                                        DIG 5 ;
                                        SENDER ;
                                        DUP 7 ;
                                        PAIR ;
                                        DUP 9 ;
                                        SWAP ;
                                        EXEC ;
                                        SWAP ;
                                        EXEC ;
                                        IF { DROP } { FAILWITH } ;
                                        DIG 2 ;
                                        PUSH address "tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU" ;
                                        UPDATE 1 } } }
                              { DROP ;
                                PUSH string "FA2_INVALID_ROYALTIES_MANAGER_ACCESS" ;
                                DIG 5 ;
                                UNIT ;
                                RIGHT unit ;
                                RIGHT (or unit unit) ;
                                SENDER ;
                                DUP 8 ;
                                PAIR ;
                                PAIR ;
                                DUP 8 ;
                                SWAP ;
                                EXEC ;
                                SWAP ;
                                EXEC ;
                                IF { DROP } { FAILWITH } ;
                                DUP 3 ;
                                DIG 3 ;
                                GET 10 ;
                                SENDER ;
                                PUSH bool False ;
                                SWAP ;
                                UPDATE ;
                                UPDATE 10 } ;
                            SOME ;
                            DIG 3 ;
                            UPDATE ;
                            UPDATE 3 } ;
                     SWAP ;
                     DIG 2 ;
                     DIG 3 ;
                     DROP 3 } ;
                 SWAP } }
           { DIG 2 ;
             DROP ;
             IF_LEFT
               { IF_LEFT
                   { DIG 3 ;
                     DROP ;
                     DUP ;
                     CAR ;
                     DIG 2 ;
                     PUSH string "FA2_INVALID_OWNER_ACCESS" ;
                     DUP 2 ;
                     SENDER ;
                     DUP 5 ;
                     PAIR ;
                     DIG 6 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     EXEC ;
                     IF { DROP } { FAILWITH } ;
                     DUP ;
                     DUP 3 ;
                     PAIR ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     DUP 2 ;
                     DIG 2 ;
                     GET 3 ;
                     DIG 2 ;
                     DIG 4 ;
                     CDR ;
                     SOME ;
                     UPDATE 3 ;
                     SOME ;
                     DIG 3 ;
                     UPDATE ;
                     UPDATE 3 }
                   { DIG 4 ;
                     DROP ;
                     ITER { UNPAIR ;
                            DUP 3 ;
                            DUP 2 ;
                            PAIR ;
                            DUP 6 ;
                            SWAP ;
                            EXEC ;
                            DUP 4 ;
                            DUP 5 ;
                            GET 5 ;
                            DIG 4 ;
                            IF_LEFT
                              { UNPAIR ;
                                PUSH string "FA_INVALID_ADD_HOOK_ACCESS" ;
                                DIG 7 ;
                                SENDER ;
                                DUP 9 ;
                                PAIR ;
                                DUP 10 ;
                                SWAP ;
                                EXEC ;
                                SWAP ;
                                EXEC ;
                                IF { DROP } { FAILWITH } ;
                                DUP 2 ;
                                DUP 2 ;
                                VIEW "is_revocable" bool ;
                                IF_NONE { PUSH bool True } {} ;
                                SWAP ;
                                IF_LEFT
                                  { IF_LEFT
                                      { IF_LEFT
                                          { DROP ;
                                            PUSH bool False ;
                                            DUP 6 ;
                                            GET 7 ;
                                            DUP 4 ;
                                            MEM ;
                                            COMPARE ;
                                            EQ ;
                                            IF {} { PUSH string "FA_DUPLICATE_HOOK" ; FAILWITH } ;
                                            DUP 2 ;
                                            CONTRACT %burn_hook (pair (address %owner) (nat %token_id) (nat %amount)) ;
                                            IF_NONE { PUSH string "FA_BURN_HOOK_UNDEFINED" ; FAILWITH } { DROP } ;
                                            DUP 5 ;
                                            DIG 5 ;
                                            GET 7 ;
                                            DIG 2 ;
                                            DIG 3 ;
                                            SWAP ;
                                            SOME ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 7 }
                                          { DROP ;
                                            PUSH bool False ;
                                            DUP 6 ;
                                            GET 3 ;
                                            DUP 4 ;
                                            MEM ;
                                            COMPARE ;
                                            EQ ;
                                            IF {} { PUSH string "FA_DUPLICATE_HOOK" ; FAILWITH } ;
                                            DUP 2 ;
                                            CONTRACT %create_hook
                                              (pair (map %token_metadata string bytes)
                                                    (nat %max_supply)
                                                    (option %royalties (pair (nat %total_shares) (map %shares address nat)))
                                                    (option %token_id nat)) ;
                                            IF_NONE { PUSH string "FA_CREATE_HOOK_UNDEFINED" ; FAILWITH } { DROP } ;
                                            DUP 5 ;
                                            DIG 5 ;
                                            GET 3 ;
                                            DIG 2 ;
                                            DIG 3 ;
                                            SWAP ;
                                            SOME ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 3 } }
                                      { IF_LEFT
                                          { DROP ;
                                            PUSH bool False ;
                                            DUP 6 ;
                                            GET 8 ;
                                            DUP 4 ;
                                            MEM ;
                                            COMPARE ;
                                            EQ ;
                                            IF {} { PUSH string "FA_DUPLICATE_HOOK" ; FAILWITH } ;
                                            DUP 2 ;
                                            CONTRACT %update_metadata_hook (map nat (map string bytes)) ;
                                            IF_NONE
                                              { PUSH string "FA_UPDATE_METADATA_HOOK_UNDEFINED" ; FAILWITH }
                                              { DROP } ;
                                            DUP 5 ;
                                            DIG 5 ;
                                            GET 8 ;
                                            DIG 2 ;
                                            DIG 3 ;
                                            SWAP ;
                                            SOME ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 8 }
                                          { DROP ;
                                            PUSH bool False ;
                                            DUP 6 ;
                                            GET 5 ;
                                            DUP 4 ;
                                            MEM ;
                                            COMPARE ;
                                            EQ ;
                                            IF {} { PUSH string "FA_DUPLICATE_HOOK" ; FAILWITH } ;
                                            DUP 2 ;
                                            CONTRACT %mint_hook (pair (address %owner) (nat %token_id) (nat %amount)) ;
                                            IF_NONE { PUSH string "FA_MINT_HOOK_UNDEFINED" ; FAILWITH } { DROP } ;
                                            DUP 5 ;
                                            DIG 5 ;
                                            GET 5 ;
                                            DIG 2 ;
                                            DIG 3 ;
                                            SWAP ;
                                            SOME ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 5 } } }
                                  { DROP ;
                                    PUSH bool False ;
                                    DUP 6 ;
                                    CAR ;
                                    DUP 4 ;
                                    MEM ;
                                    COMPARE ;
                                    EQ ;
                                    IF {} { PUSH string "FA_DUPLICATE_HOOK" ; FAILWITH } ;
                                    DUP 2 ;
                                    CONTRACT %transfer_hook
                                      (list (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount))))) ;
                                    IF_NONE { PUSH string "FA_TRANSFER_HOOK_UNDEFINED" ; FAILWITH } { DROP } ;
                                    DUP 5 ;
                                    DIG 5 ;
                                    CAR ;
                                    DIG 2 ;
                                    DIG 3 ;
                                    SWAP ;
                                    SOME ;
                                    SWAP ;
                                    UPDATE ;
                                    UPDATE 1 } }
                              { UNPAIR ;
                                PUSH string "FA_INVALID_REMOVE_HOOK_ACCESS" ;
                                SENDER ;
                                DUP 4 ;
                                COMPARE ;
                                EQ ;
                                DIG 8 ;
                                SENDER ;
                                DUP 10 ;
                                PAIR ;
                                DUP 11 ;
                                SWAP ;
                                EXEC ;
                                SWAP ;
                                EXEC ;
                                OR ;
                                IF { DROP } { FAILWITH } ;
                                IF_LEFT
                                  { IF_LEFT
                                      { IF_LEFT
                                          { DROP ;
                                            DUP 4 ;
                                            GET 7 ;
                                            DUP 2 ;
                                            GET ;
                                            IF_NONE { PUSH string "FA_INVALID_HOOK" ; FAILWITH } {} ;
                                            PUSH bool True ;
                                            SWAP ;
                                            COMPARE ;
                                            EQ ;
                                            IF {} { PUSH string "FA_IRREVOCABLE_HOOK" ; FAILWITH } ;
                                            DUP 4 ;
                                            DIG 4 ;
                                            GET 7 ;
                                            DIG 2 ;
                                            NONE bool ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 7 }
                                          { DROP ;
                                            DUP 4 ;
                                            GET 3 ;
                                            DUP 2 ;
                                            GET ;
                                            IF_NONE { PUSH string "FA_INVALID_HOOK" ; FAILWITH } {} ;
                                            PUSH bool True ;
                                            SWAP ;
                                            COMPARE ;
                                            EQ ;
                                            IF {} { PUSH string "FA_IRREVOCABLE_HOOK" ; FAILWITH } ;
                                            DUP 4 ;
                                            DIG 4 ;
                                            GET 3 ;
                                            DIG 2 ;
                                            NONE bool ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 3 } }
                                      { IF_LEFT
                                          { DROP ;
                                            DUP 4 ;
                                            GET 8 ;
                                            DUP 2 ;
                                            GET ;
                                            IF_NONE { PUSH string "FA_INVALID_HOOK" ; FAILWITH } {} ;
                                            PUSH bool True ;
                                            SWAP ;
                                            COMPARE ;
                                            EQ ;
                                            IF {} { PUSH string "FA_IRREVOCABLE_HOOK" ; FAILWITH } ;
                                            DUP 4 ;
                                            DIG 4 ;
                                            GET 8 ;
                                            DIG 2 ;
                                            NONE bool ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 8 }
                                          { DROP ;
                                            DUP 4 ;
                                            GET 5 ;
                                            DUP 2 ;
                                            GET ;
                                            IF_NONE { PUSH string "FA_INVALID_HOOK" ; FAILWITH } {} ;
                                            PUSH bool True ;
                                            SWAP ;
                                            COMPARE ;
                                            EQ ;
                                            IF {} { PUSH string "FA_IRREVOCABLE_HOOK" ; FAILWITH } ;
                                            DUP 4 ;
                                            DIG 4 ;
                                            GET 5 ;
                                            DIG 2 ;
                                            NONE bool ;
                                            SWAP ;
                                            UPDATE ;
                                            UPDATE 5 } } }
                                  { DROP ;
                                    DUP 4 ;
                                    CAR ;
                                    DUP 2 ;
                                    GET ;
                                    IF_NONE { PUSH string "FA_INVALID_HOOK" ; FAILWITH } {} ;
                                    PUSH bool True ;
                                    SWAP ;
                                    COMPARE ;
                                    EQ ;
                                    IF {} { PUSH string "FA_IRREVOCABLE_HOOK" ; FAILWITH } ;
                                    DUP 4 ;
                                    DIG 4 ;
                                    CAR ;
                                    DIG 2 ;
                                    NONE bool ;
                                    SWAP ;
                                    UPDATE ;
                                    UPDATE 1 } } ;
                            SOME ;
                            DIG 3 ;
                            UPDATE ;
                            UPDATE 5 } ;
                     SWAP ;
                     DIG 2 ;
                     DROP 2 } }
               { DIG 3 ;
                 DROP ;
                 ITER { UNPAIR ;
                        PUSH string "FA2_INVALID_OWNER_ACCESS" ;
                        DUP 4 ;
                        SENDER ;
                        DUP 4 ;
                        PAIR ;
                        DUP 7 ;
                        SWAP ;
                        EXEC ;
                        SWAP ;
                        EXEC ;
                        IF { DROP } { FAILWITH } ;
                        DUP 3 ;
                        DUP 2 ;
                        PAIR ;
                        DUP 6 ;
                        SWAP ;
                        EXEC ;
                        DUP 4 ;
                        DIG 4 ;
                        GET 3 ;
                        DIG 4 ;
                        IF_LEFT
                          { UNPAIR ;
                            IF_LEFT
                              { IF_LEFT
                                  { DROP ;
                                    DUP 4 ;
                                    DIG 4 ;
                                    GET 5 ;
                                    DIG 2 ;
                                    PUSH bool True ;
                                    SWAP ;
                                    UPDATE ;
                                    UPDATE 5 }
                                  { DROP ;
                                    DUP 4 ;
                                    DIG 4 ;
                                    GET 9 ;
                                    DIG 2 ;
                                    PUSH bool True ;
                                    SWAP ;
                                    UPDATE ;
                                    UPDATE 9 } }
                              { IF_LEFT
                                  { DROP ;
                                    DUP 4 ;
                                    DIG 4 ;
                                    GET 7 ;
                                    DIG 2 ;
                                    PUSH bool True ;
                                    SWAP ;
                                    UPDATE ;
                                    UPDATE 7 }
                                  { DROP ;
                                    DUP 4 ;
                                    DIG 4 ;
                                    GET 10 ;
                                    DIG 2 ;
                                    PUSH bool True ;
                                    SWAP ;
                                    UPDATE ;
                                    UPDATE 10 } } }
                          { UNPAIR ;
                            IF_LEFT
                              { IF_LEFT
                                  { DROP ;
                                    DUP 4 ;
                                    DIG 4 ;
                                    GET 5 ;
                                    DIG 2 ;
                                    PUSH bool False ;
                                    SWAP ;
                                    UPDATE ;
                                    UPDATE 5 }
                                  { DROP ;
                                    DUP 4 ;
                                    DIG 4 ;
                                    GET 9 ;
                                    DIG 2 ;
                                    PUSH bool False ;
                                    SWAP ;
                                    UPDATE ;
                                    UPDATE 9 } }
                              { IF_LEFT
                                  { DROP ;
                                    DUP 4 ;
                                    DIG 4 ;
                                    GET 7 ;
                                    DIG 2 ;
                                    PUSH bool False ;
                                    SWAP ;
                                    UPDATE ;
                                    UPDATE 7 }
                                  { DROP ;
                                    DUP 4 ;
                                    DIG 4 ;
                                    GET 10 ;
                                    DIG 2 ;
                                    PUSH bool False ;
                                    SWAP ;
                                    UPDATE ;
                                    UPDATE 10 } } } ;
                        SOME ;
                        DIG 3 ;
                        UPDATE ;
                        UPDATE 3 } ;
                 SWAP ;
                 DIG 2 ;
                 DROP 2 } ;
             SWAP } ;
         PAIR } ;
  view "get_owner"
       address
       address
       { UNPAIR ;
         SWAP ;
         GET 3 ;
         SWAP ;
         GET ;
         IF_NONE { PUSH address "tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU" } { CAR } } ;
  view "is_owner"
       (pair address address)
       bool
       { UNPAIR ;
         UNPAIR ;
         DIG 2 ;
         GET 3 ;
         SWAP ;
         GET ;
         IF_NONE { DROP ; PUSH bool False } { CAR ; COMPARE ; EQ } } ;
  view "has_role"
       (pair (pair address address)
             (or (or (unit %creator) (unit %metadata_manager))
                 (or (unit %minter) (unit %royalties_manager))))
       bool
       { UNPAIR ;
         UNPAIR ;
         UNPAIR ;
         DIG 3 ;
         GET 3 ;
         SWAP ;
         GET ;
         IF_NONE
           { DROP 2 ; PUSH bool False }
           { DIG 2 ;
             IF_LEFT
               { IF_LEFT { DROP ; GET 5 ; SWAP ; MEM } { DROP ; GET 9 ; SWAP ; MEM } }
               { IF_LEFT { DROP ; GET 7 ; SWAP ; MEM } { DROP ; GET 10 ; SWAP ; MEM } } } } ;
  view "get_hooks"
       (pair address
             (or (or (or (unit %burn_hook) (unit %create_hook))
                     (or (unit %metadata_hook) (unit %mint_hook)))
                 (unit %transfer_hook)))
       (set address)
       { UNPAIR ;
         UNPAIR ;
         DUP 3 ;
         GET 5 ;
         SWAP ;
         GET ;
         IF_NONE
           { EMPTY_MAP address bool ;
             EMPTY_MAP address bool ;
             EMPTY_MAP address bool ;
             EMPTY_MAP address bool ;
             EMPTY_MAP address bool ;
             PAIR 5 }
           {} ;
         SWAP ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { DROP ;
                     SWAP ;
                     GET 6 ;
                     GET 7 ;
                     SWAP ;
                     GET 7 ;
                     ITER { CAR ; PUSH bool True ; SWAP ; UPDATE } }
                   { DROP ;
                     SWAP ;
                     GET 6 ;
                     GET 3 ;
                     SWAP ;
                     GET 3 ;
                     ITER { CAR ; PUSH bool True ; SWAP ; UPDATE } } }
               { IF_LEFT
                   { DROP ;
                     SWAP ;
                     GET 6 ;
                     GET 8 ;
                     SWAP ;
                     GET 8 ;
                     ITER { CAR ; PUSH bool True ; SWAP ; UPDATE } }
                   { DROP ;
                     SWAP ;
                     GET 6 ;
                     GET 5 ;
                     SWAP ;
                     GET 5 ;
                     ITER { CAR ; PUSH bool True ; SWAP ; UPDATE } } } }
           { DROP ;
             SWAP ;
             GET 6 ;
             CAR ;
             SWAP ;
             CAR ;
             ITER { CAR ; PUSH bool True ; SWAP ; UPDATE } } } }

