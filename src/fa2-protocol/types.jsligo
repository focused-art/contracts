#import "../common/types.jsligo" "Common"
#import "../common/utils/fa2.jsligo" "Fa2"
#import "../common/utils/permit.jsligo" "Permit"

export type trusted = Common.trusted;
export type token_id = Fa2.Fa2.token_id;
export type role_type = Common.role_type;
export type hook_type = Common.hook_type;

export type permissions = {
  owner                 : trusted,
  pending_owner         : option<address>,
  creator               : set<trusted>,
  minter                : set<trusted>,
  metadata_manager      : set<trusted>,
  royalties_manager     : set<trusted>
};

export type revocable = bool;

export type hooks = {
  transfer              : map<trusted, revocable>,
  create                : map<trusted, revocable>,
  mint                  : map<trusted, revocable>,
  burn                  : map<trusted, revocable>,
  update_metadata       : map<trusted, revocable>,
  update_royalties      : map<trusted, revocable>
};

export type protocol_hooks = {
  transfer              : set<trusted>,
  create                : set<trusted>,
  mint                  : set<trusted>,
  burn                  : set<trusted>,
  update_metadata       : set<trusted>,
  update_royalties      : set<trusted>
};

export type fa2_storage = Fa2.Fa2.storage;

// contract storage
export type storage = {
  metadata              : big_map<string, bytes>,
  roles                 : big_map<Common.contract_address, permissions>,
  hooks                 : big_map<Common.contract_address, hooks>,
  protocol_hooks        : protocol_hooks,
  permits               : Permit.used_permits,
  permits_expiry        : Permit.expiring_permits,
};

// define return type for readability
export type @return = [Common.op_list, storage];

export type update_role_param =
  | ["Add", role_type, trusted]
  | ["Remove", role_type, trusted];

export type update_roles_params =
  list<(michelson_pair<[Common.contract_address, "fa2_address", update_role_param, ""]>)>;

export type renounce_role_params =
  | ["Ownership", unit]
  | ["Creator", unit]
  | ["Minter", unit]
  | ["Metadata_manager", unit]
  | ["Royalties_manager", unit];

export type renounce_roles_params =
  list<(michelson_pair<[Common.contract_address, "fa2_address", renounce_role_params, ""]>)>;

export type update_hook_param =
  | ["Add", hook_type, trusted]
  | ["Remove", hook_type, trusted];

export type update_hooks_params =
  list<(michelson_pair<[Common.contract_address, "fa2_address", update_hook_param, ""]>)>;

export type transfer_ownership_params = {
  fa2_address           : Common.contract_address,
  new_owner             : trusted,
};

export type migrate_from_protocol_params = {
  fa2_address           : Common.contract_address,
  roles                 : permissions,
  hooks                 : hooks
};

export type permitted_action =
  | ["Init"]
  | ["Transfer_ownership"]
  | ["Update_roles"]
  | ["Renounce_roles"]
  | ["Update_hooks"]
  | ["Confirm_ownership"];

export type permitted_params = {
  action                : permitted_action,
  packed_params         : bytes,
  permit                : Permit.permit
};

export type entry_action =
  | ["Permitted", permitted_params]
  | ["Init", Common.metadata]
  | ["Transfer_ownership", transfer_ownership_params]
  | ["Update_roles", update_roles_params]
  | ["Renounce_roles", renounce_roles_params]
  | ["Update_hooks", update_hooks_params]
  | ["Confirm_ownership", Common.contract_address]
  | ["Migrate_to_protocol", trusted];
