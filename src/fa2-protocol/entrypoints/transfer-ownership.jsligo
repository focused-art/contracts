// Transfer contract ownership
const transfer_ownership = (params: transfer_ownership_params, permit_opt: option<permit>, s1: storage): @return => {
  let s = s1;

  const sender : address = match(permit_opt, {
    Some: permit => {
      const param_bytes : bytes = Bytes.pack(["%update_roles", params]);
      s = check_and_store_permit(permit, param_bytes, s);
      return address_from_key(permit.signer);
    },
    None: () => Tezos.get_sender()
  });

  assert_with_error(is_owner([params.fa2_address, sender], s), "FA2_INVALID_OWNER_ACCESS");

  const permissions: permissions = get_permissions_or_fail(params.fa2_address, s);

  s.roles = Big_map.update(params.fa2_address, Some({ ...permissions, pending_owner: Some(params.new_owner) }), s.roles);

  return [list([]), s]
};
