#import "../types.jsligo" "T"
#import "../helpers.jsligo" "H"
#import "../views.jsligo" "V"
#import "../../common/utils/address.jsligo" "A"

export const entrypoint = (params: T.renounce_roles_params, permit_opt: option<T.Permit.permit>, s1: T.storage): T.@return => {
  let s = s1;

  const sender : address = match(permit_opt) {
    when(Some(permit)): do {
      const param_bytes : bytes = Bytes.pack(["%renounce_roles", params]);
      s = H.check_and_store_permit(permit, param_bytes, s);
      return A.address_from_key(permit.signer);
    };
    when(None()): Tezos.get_sender();
  };

  for (const entry of params) {
    const [kt1, renounce_role_params] = entry;
    const permissions: T.permissions = H.get_permissions_or_fail(kt1, s);
    s.roles = Big_map.update(kt1, Some(match(renounce_role_params) {
      when(Ownership()): do {
        assert_with_error(V.is_owner([kt1, sender], s), "FA2_INVALID_OWNER_ACCESS");
        return { ...permissions, owner: T.Common.c_NULL_ADDRESS }
      };
      when(Creator()): do {
        assert_with_error(V.has_role([kt1, sender, Creator()], s), "FA2_INVALID_CREATOR_ACCESS");
        return {
          ...permissions,
          creator: Set.remove(sender, permissions.creator)
        }
      };
      when(Minter()): do {
        assert_with_error(V.has_role([kt1, sender, Minter()], s), "FA2_INVALID_MINTER_ACCESS");
        return {
          ...permissions,
          minter: Set.remove(sender, permissions.minter)
        }
      };
      when(Metadata_manager()): do {
        assert_with_error(V.has_role([kt1, sender, Metadata_manager()], s), "FA2_INVALID_METADATA_MANAGER_ACCESS");
        return {
          ...permissions,
          metadata_manager: Set.remove(sender, permissions.metadata_manager)
        }
      };
      when(Royalties_manager()): do {
        assert_with_error(V.has_role([kt1, sender, Royalties_manager()], s), "FA2_INVALID_ROYALTIES_MANAGER_ACCESS");
        return {
          ...permissions,
          royalties_manager: Set.remove(sender, permissions.royalties_manager)
        }
      };
    }), s.roles);
  };

  return [list([]), s]
};
