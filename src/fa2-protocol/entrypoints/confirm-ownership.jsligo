// Confirm transfer of ownership
const confirm_ownership = (kt1: contract_address, permit_opt: option<permit>, s1: storage): @return => {
  let s = s1;

  const sender : address = match(permit_opt, {
    Some: permit => {
      const param_bytes : bytes = Bytes.pack(["%confirm_ownership", kt1]);
      s = check_and_store_permit(permit, param_bytes, s);
      return address_from_key(permit.signer);
    },
    None: () => Tezos.get_sender()
  });

  const permissions: permissions = get_permissions_or_fail(kt1, s);

  const pending_owner: address =
    Option.unopt_with_error(permissions.pending_owner, "FA2_NO_PENDING_OWNER");

  assert_with_error(sender == pending_owner, "FA2_INVALID_PENDING_OWNER_ACCESS");

  return [list([]), {
    ...s,
    roles: Big_map.update(kt1, Some({
      ...permissions,
      owner: pending_owner,
      pending_owner: None() as option<address>
    }), s.roles)
  }];
};
