#import "../types.jsligo" "T"
#import "confirm-ownership.jsligo" "ConfirmOwnership"
#import "init.jsligo" "Init"
#import "migrate-to-protocol.jsligo" "MigrateToProtocol"
#import "renounce-roles.jsligo" "RenounceRoles"
#import "transfer-ownership.jsligo" "TransferOwnership"
#import "update-hooks.jsligo" "UpdateHooks"
#import "update-roles.jsligo" "UpdateRoles"

export const entrypoint = (input: T.permitted_params, s: T.storage): T.@return =>
  match(input.action) {
    when(Init()): do {
      const params: T.Common.metadata = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return Init.entrypoint(params, Some(input.permit), s);
    };
    when(Transfer_ownership()): do {
      const params: T.transfer_ownership_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return TransferOwnership.entrypoint(params, Some(input.permit), s);
    };
    when(Update_roles()): do {
      const params: T.update_roles_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return UpdateRoles.entrypoint(params, Some(input.permit), s);
    };
    when(Renounce_roles()): do {
      const params: T.renounce_roles_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return RenounceRoles.entrypoint(params, Some(input.permit), s);
    };
    when(Update_hooks()): do {
      const params: T.update_hooks_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return UpdateHooks.entrypoint(params, Some(input.permit), s);
    };
    when(Confirm_ownership()): do {
      const params: T.Common.contract_address = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return ConfirmOwnership.entrypoint(params, Some(input.permit), s);
    };
  };
