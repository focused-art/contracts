const permitted_main = (input: permitted_params, s: storage): @return =>
  match(input.action, {
    Init: () => {
      const params: metadata = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return init(params, Some(input.permit), s);
    },
    Transfer_ownership: () => {
      const params: transfer_ownership_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return transfer_ownership(params, Some(input.permit), s);
    },
    Update_roles: () => {
      const params: update_roles_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return update_roles(params, Some(input.permit), s);
    },
    Renounce_roles: () => {
      const params: renounce_roles_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return renounce_roles(params, Some(input.permit), s);
    },
    Update_hooks: () => {
      const params: update_hooks_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return update_hooks(params, Some(input.permit), s);
    },
    Confirm_ownership: () => {
      const params: contract_address = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return confirm_ownership(params, Some(input.permit), s);
    },
  });
