#import "../types.jsligo" "T"
#import "../../../common/utils/fa2.jsligo" "Fa2"
#import "../../../common/utils/timestamp.jsligo" "Timestamp"

// Freeze a token
export const entrypoint = (params: T.freeze_params, s1: T.storage): T.@return => {
  let s = s1;

  // Only fa2 operator can call
  const operator_param: Fa2.operator_param = {
    owner: params.owner;
    operator: Tezos.get_sender();
    token_id: params.token.token_id
  };
  assert_with_error(Fa2.is_fa2_operator(params.token, operator_param), "FA_NOT_FA2_OPERATOR");

  // Must be a transfer hook
  assert_with_error(Fa2.is_fa2_transfer_hook(params.token, Tezos.get_self_address()),"FA_NOT_FA2_TRANSFER_HOOK");

  // Must be a burn hook
  assert_with_error(Fa2.is_fa2_burn_hook(params.token, Tezos.get_self_address()), "FA_NOT_FA2_BURN_HOOK");

  // Update storage
  s.frozen_tokens = Big_map.update(
    [params.owner, params.token],
    Some(match(Big_map.find_opt([params.owner, params.token], s.frozen_tokens)) {
      when(Some(t)): Timestamp.max(t, params.freeze_until);
      when(None()): params.freeze_until;
    }),
    s.frozen_tokens
  );

  return [T.Common.noop, s]
};
