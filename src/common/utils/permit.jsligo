type permit =
// @layout comb
{
  signer                : key,
  signature             : signature,
  nonce                 : nat
};

type used_permits = big_map<bytes, unit>;

const address_from_key = (k: key): address =>
  Tezos.address(Tezos.implicit_account(Crypto.hash_key(k)));

const check_permit = (permit: permit, param_bytes: bytes, used_permits1: used_permits): used_permits => {
  let used_permits = used_permits1;

  const param_hash: bytes = Crypto.blake2b(param_bytes);
  const message: bytes = Bytes.pack([[Tezos.get_chain_id(), Tezos.get_self_address()], [permit.nonce, param_hash]]);

  // Avoid permit re-use to mitigate replay attacks
  const permit_hash : bytes = Crypto.blake2b(Bytes.pack([message, permit.signer]));
  assert_with_error(Big_map.mem(permit_hash, used_permits) == false, "DUP_PERMIT");

  // Check permit signature is valid
  const valid_permit: bool = Crypto.check(permit.signer, permit.signature, message);
  if (valid_permit == false)
    failwith(["MISSIGNED", message]);

  used_permits = Big_map.add(permit_hash, unit, used_permits);

  return used_permits;
};
