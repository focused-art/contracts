#include "../../fa2/types.jsligo"

type fa2 =
// @layout comb
{
  address;
  token_id
};

type calc_royalties_params =
// @layout comb
{
  price: nat;
  royalties
};

const calc_royalties = (p: calc_royalties_params): royalty_shares =>
  (Tezos.constant("expru2hTf7Qe5QVb7UWdLKVedax3Snw3NyewjDX3aQYUQfD9xCR6YY") as (v: calc_royalties_params) => royalty_shares)(p);

const get_royalty_shares = (token: fa2, price: nat): royalty_shares => {
  const royalties: royalties = Option.unopt(
    Tezos.call_view("get_royalties", token.token_id, token.address) as option<royalties>
  );
  return calc_royalties({ price: price; royalties: royalties })
};

const get_total_supply = (token: fa2): nat =>
  Option.unopt(Tezos.call_view("total_supply", token.token_id, token.address) as option<nat>);

const get_fa2_created = (token: fa2): timestamp =>
  Option.unopt(Tezos.call_view("get_created", token.token_id, token.address) as option<timestamp>);

const is_fa2_owner = (token: fa2, check: address): bool =>
  match(Tezos.call_view("is_owner", check, token.address) as option<bool>,
    { Some: response => response, None: () => false }
  );

const is_fa2_operator = (token: fa2, check: operator_param): bool =>
  match(Tezos.call_view("is_operator", check, token.address) as option<bool>,
    { Some: response => response, None: () => false }
  );

const is_fa2_creator = (token: fa2, check: address): bool =>
  match(Tezos.call_view("has_role", [check, Creator()], token.address) as option<bool>,
    { Some: response => response, None: () => false }
  );

const is_fa2_minter = (token: fa2, check: address): bool =>
  match(Tezos.call_view("has_role", [check, Minter()], token.address) as option<bool>,
    { Some: response => response, None: () => false }
  );

const is_fa2_metadata_manager = (token: fa2, check: address): bool =>
  match(Tezos.call_view("has_role", [check, Metadata_manager()], token.address) as option<bool>,
    { Some: response => response, None: () => false }
  );

const is_fa2_royalties_manager = (token: fa2, check: address): bool =>
  match(Tezos.call_view("has_role", [check, Royalties_manager()], token.address) as option<bool>,
    { Some: response => response, None: () => false }
  );

const is_fa2_transfer_hook = (token: fa2, check: address): bool =>
  match(Tezos.call_view("is_hook", [check, Transfer_hook()], token.address) as option<bool>,
    { Some: response => response, None: () => false }
  );

const is_fa2_create_hook = (token: fa2, check: address): bool =>
  match(Tezos.call_view("is_hook", [check, Create_hook()], token.address) as option<bool>,
    { Some: response => response, None: () => false }
  );

const is_fa2_mint_hook = (token: fa2, check: address): bool =>
  match(Tezos.call_view("is_hook", [check, Mint_hook()], token.address) as option<bool>,
    { Some: response => response, None: () => false }
  );

const is_fa2_burn_hook = (token: fa2, check: address): bool =>
  match(Tezos.call_view("is_hook", [check, Burn_hook()], token.address) as option<bool>,
    { Some: response => response, None: () => false }
  );

const is_fa2_metadata_hook = (token: fa2, check: address): bool =>
  match(Tezos.call_view("is_hook", [check, Metadata_hook()], token.address) as option<bool>,
    { Some: response => response, None: () => false }
  );

const fa2_transfer = (token: fa2, from_: address, to_: address, amount: nat): operation => {
  const transfer_entrypoint: contract<transfer_params> =
    match(Tezos.get_entrypoint_opt("%transfer", token.address) as option<contract<transfer_params>>,
      {
        None: () => failwith("FA_CANNOT_INVOKE_FA2_TRANSFER"),
        Some: entrypoint => entrypoint
      }
    );

  const transfer: transfer_param = {
    from_: from_,
    txs: list([
        {
          to_: to_;
          token_id: token.token_id;
          amount: amount
        }
      ])
    };

  return Tezos.transaction(list([transfer]), (0 as mutez), transfer_entrypoint);
};

const fa2_mint = (token: fa2, recipient: address, amount: nat): operation =>
  match(Tezos.get_entrypoint_opt("%mint", token.address) as option<contract<mint_burn_params>>,
    {
      Some: entrypoint => Tezos.transaction(
        { owner: recipient, token_id: token.token_id, amount },
        (0 as mutez),
        entrypoint
      ),
      None: () => failwith("FA_MINT_ENTRYPOINT_UNDEFINED")
    }
  );

const fa2_burn = (token: fa2, owner: address, amount: nat): operation =>
  match(Tezos.get_entrypoint_opt("%burn", token.address) as option<contract<mint_burn_params>>,
    {
      Some: entrypoint => Tezos.transaction(
        { owner, token_id: token.token_id, amount },
        (0 as mutez),
        entrypoint
      ),
      None: () => fa2_transfer(token, owner, c_NULL_ADDRESS, amount)
    }
  );

const fa2_freeze = (token: fa2, owner: address, amount: nat, freeze_until: timestamp): operation =>
  fa2_transfer(token, owner, c_NULL_ADDRESS, amount);
