// Mint the mint
const mint = (params: mint_params, s1: storage): @return => {
  let s = s1;

  const recipient: recipient = match(params.recipient, {
    Some: recipient => recipient,
    None: () => Tezos.get_sender()
  });

  const mint: mint = get_mint_or_fail(params.mint_id, s);

  // Mint is paused?
  assert_with_error(mint.paused == false, "FA_MINT_PAUSED");

  // Mint has started?
  assert_with_error(Tezos.get_now() >= mint.start_time, "FA_MINT_NOT_STARTED");

  // Mint ended?
  if (mint.duration > 0)
    assert_with_error(Tezos.get_now() < (mint.start_time + mint.duration), "FA_MINT_ENDED");

  // Max mint reached
  if (mint.max_mint > (0 as nat) && mint.minted + params.mint_amount > mint.max_mint)
    failwith("FA_MAX_MINT_EXCEEDED");

  // Get wallet record
  let wallet_record: wallet_record = get_wallet_record([Tezos.get_sender(), params.mint_id], s);

  // Minted max per wallet?
  if (mint.max_per_wallet > (0 as nat) && wallet_record.minted + params.mint_amount > mint.max_per_wallet)
    failwith("FA_MAX_MINT_PER_WALLET_EXCEEDED");

  // Update last block minted
  if (wallet_record.last_block != Tezos.get_level()) {
    wallet_record.block_minted = (0 as nat);
    wallet_record.last_block = Tezos.get_level()
  };

  // Minted max per block?
  if (mint.max_per_block > (0 as nat) && wallet_record.block_minted + params.mint_amount > mint.max_per_block)
    failwith("FA_MAX_MINT_PER_BLOCK_EXCEEDED");

  // Initialize operations
  let operations: list<operation> = list([]);

  // Get mint recipe instructions
  const recipe: recipe = match(Map.find_opt(params.recipe_id, mint.recipes), {
    Some: recipe => recipe,
    None: () => failwith("FA_INVALID_RECIPE_ID")
  });

  let required_tez: tez = (0 as mutez);

  for (const r of recipe) {
    const [recipe_step, instruction] = r;

    const step_input: set<fa2_with_amount> = match(Map.find_opt(recipe_step, params.recipe_steps),
      { Some: input => input, None: () => Set.empty }
    );

    const _ = match(instruction, {
      Burn: ingredient => {
        validate_ingredient(ingredient, step_input);
        for (const input of step_input) {
          operations = list([
            fa2_burn(input.token, Tezos.get_sender(), input.amount * params.mint_amount),
            ...operations
          ]);
        }
      },
      Hold: ingredient => { return },
      Freeze: (ingredient, freeze_until) => {
        validate_ingredient(ingredient, step_input);
        for (const input of step_input) {
          operations = list([
            fa2_freeze(input.token, Tezos.get_sender(), input.amount * params.mint_amount, freeze_until),
            ...operations
          ]);
        }
      },
      Transfer: (ingredient, recipient) => {
        validate_ingredient(ingredient, step_input);
        for (const input of step_input) {
          operations = list([
            fa2_transfer(input.token, Tezos.get_sender(), recipient, input.amount * params.mint_amount),
            ...operations
          ]);
        }
      },
      Pay: amount => {
        assert_with_error(Set.size(step_input) == (0 as nat), "FA_INVALID_RECIPE_STEP");
        required_tez = required_tez + (amount * params.mint_amount);
      }
    });
  };

  // Must be sending valid amount of tez
  assert_with_error(Tezos.get_amount() == required_tez, "FA_INVALID_TEZ_AMOUNT");

  // split tez per product
  const ediv1: option<[int, nat]> = ediv(tez_to_int(required_tez), Set.size(mint.products));
  const [required_tez_per_product, remainder_count_c]: [tez, nat] = match(ediv1, {
    Some: (quotient, remainder) => [int_to_tez(quotient), remainder],
    None: () => [(0 as mutez), (0 as nat)]
  });

  let remainder_count = remainder_count_c;
  for (const product of mint.products) {
    // Mint operations
    operations = list([
      fa2_mint(product.token, recipient, product.amount * params.mint_amount),
      ...operations
    ]);

    // Pay out royalties and recipients
    if (required_tez_per_product > (0 as mutez) || remainder_count > (0 as nat)) {
      let t: tez = required_tez_per_product;
      if (remainder_count > (0 as nat)) {
        t = t + (1 as mutez);
        remainder_count = Option.unopt(is_nat(remainder_count - (1 as nat)))
      };
      operations = pay_royalties_and_recipients(product.token, mint.recipients, t, operations)
    }
  };

  // Update storage
  wallet_record.minted = wallet_record.minted + params.mint_amount;
  wallet_record.block_minted = wallet_record.block_minted + params.mint_amount;
  s.ledger = Big_map.update([Tezos.get_sender(), params.mint_id], Some(wallet_record), s.ledger);
  s.mints = Big_map.update(params.mint_id, Some({ ...mint, minted: mint.minted + params.mint_amount }), s.mints);

  return [operations, s]
};
