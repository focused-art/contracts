#import "../common/types.jsligo" "Common"
#import "../common/utils/fa2.jsligo" "Fa2"

export type token_id = Fa2.Fa2.token_id;

export type wallet_record = {
  minted: nat,
  last_block: nat,
  block_minted: nat
};

export type fa2_with_amount = {
  token: Fa2.fa2;
  amount: nat
};

export type token_id_opts =
  | ["Token_id", token_id]
  | ["Range", michelson_pair<[token_id, "from_token_id", token_id, "to_token_id"]>]
  | ["Set", set<token_id>]
  | ["Any", unit];

export type ingredient = {
  tokens: map<address, token_id_opts>;
  amount: nat
};

export type instruction =
  | ["Burn", ingredient]
  | ["Hold", ingredient]
  | ["Freeze", michelson_pair<[ingredient, "", timestamp, "freeze_until"]>]
  | ["Transfer", michelson_pair<[ingredient, "", Common.recipient, "recipient"]>]
  | ["View", michelson_pair<[Common.contract_address, "contract_address", option<bytes>, "custom_data"]>]
  | ["Call", michelson_pair<[Common.contract_address, "contract_address", option<bytes>, "custom_data"]>]
  | ["Pay", tez];

export type recipe_step = nat;
export type recipe_id = nat;
export type recipe = map<recipe_step, instruction>;
export type products = set<fa2_with_amount>;

export type mint_id = nat;

export type mint_callback_params = {
  mint_id,
  recipe_id,
  mint_amount: nat,
  tez_paid: tez,
  sender: address,
  recipient: Common.recipient,
  data: option<bytes>,
};

export type mint = {
  owner: address,
  paused: bool,
  recipes: map<recipe_id, recipe>,
  products,
  recipients: Common.recipients,
  minted: nat,
  start_time: timestamp,
  duration: int,
  max_mint: nat,
  max_per_block: nat,
  max_per_wallet: nat,
};

export type storage = {
  metadata: big_map<string, bytes>,
  mints: big_map<mint_id, mint>,
  next_mint_id: mint_id,
  ledger: big_map<[address, mint_id], wallet_record>
};

// define return for readability
export type @return = [Common.op_list, storage];

// Entrypoint params
export type create_params = {
  recipes: map<recipe_id, recipe>,
  products,
  recipients: Common.recipients,
  start_time: timestamp,
  duration: int,
  max_mint: nat,
  max_per_block: nat,
  max_per_wallet: nat,
};

export type mint_params = {
  mint_id,
  recipe_id,
  recipe_steps: map<recipe_step, set<fa2_with_amount>>,
  mint_amount: nat,
  recipient: option<Common.recipient>,
  callback: option<michelson_pair<[contract<mint_callback_params>, "", option<bytes>, "custom_data"]>>,
};

export type mint_update_action =
  | ["Pause", mint_id, bool]
  | ["Update_start_time", mint_id, timestamp]
  | ["Update_duration", mint_id, int]
  | ["Update_max_per_block", mint_id, nat]
  | ["Update_max_per_wallet", mint_id, nat]
  | ["Update_recipients", mint_id, Common.recipients];

export type mint_owner_action =
  | ["Cancel", mint_id]
  | ["Mint_update_action", mint_update_action];

export type entry_action =
  | ["Mint_owner_action", mint_owner_action]
  | ["Create", create_params]
  | ["Mint", mint_params];
