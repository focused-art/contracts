#import "types.jsligo" "T"
#import "helpers.jsligo" "H"
#import "../common/types.jsligo" "Common"

type trusted = Common.trusted;
type role_type = Common.role_type;
type hook_type = Common.hook_type;

export const get_protocol = (_: unit, s: T.storage): trusted =>
  s.protocol;

export const get_owner = (_: unit, s: T.storage): trusted =>
  match(
    Tezos.call_view("get_owner", Tezos.get_self_address(), s.protocol) as option<trusted>
  ) {
    when(Some(response)): response;
    when(None()): Common.c_NULL_ADDRESS;
  };

export const is_owner = (input: address, s: T.storage): bool =>
  match(
    Tezos.call_view("is_owner", [Tezos.get_self_address(), input], s.protocol) as option<bool>
  ) {
    when(Some(response)): response;
    when(None()): false;
  };

export const has_role = ([user, role_type]: [address, role_type], s: T.storage): bool =>
  match(
    Tezos.call_view("has_role", [Tezos.get_self_address(), user, role_type], s.protocol) as option<bool>
  ) {
    when(Some(response)): response;
    when(None()): false;
  };

export const get_hooks = (k: hook_type, s: T.storage): set<trusted> =>
  match(
    Tezos.call_view("get_hooks", [Tezos.get_self_address(), k], s.protocol) as option<set<trusted>>
  ) {
    when(Some(response)): response;
    when(None()): Set.empty;
  };

export const is_hook = ([hook_address, hook_type]: [address, hook_type], s: T.storage): bool =>
  Set.mem(hook_address, get_hooks(hook_type, s));

export const next_token_id = (_: unit, s: T.storage): nat =>
  s.next_token_id;

export const get_balance = (params: T.balance_of_request, s: T.storage): nat =>
  H.internal_get_balance_of(params.owner, params.token_id, s);

export const get_total_supply = (token_id: T.token_id, s: T.storage): nat =>
  H.internal_get_token_total_supply(token_id, s);

export const get_max_supply = (token_id: T.token_id, s: T.storage): nat =>
  match(Big_map.find_opt(token_id, s.token_max_supply)) {
    when(Some(max_supply)): max_supply;
    when(None()): 0n;
  };

export const is_operator = (params: T.operator_param, s: T.storage): bool =>
  H.internal_is_operator(params.owner, params.operator, params.token_id,s);

export const get_token_metadata = (token_id: T.token_id, s: T.storage): Common.metadata =>
  match(Big_map.find_opt(token_id, s.token_metadata)) {
    when(Some(token_metadata)): token_metadata.token_info;
    when(None()): Map.empty;
  };

export const is_token = (token_id: T.token_id, s: T.storage): bool =>
  Big_map.mem(token_id, s.token_total_supply);

export const get_royalties = (token_id: T.token_id, s: T.storage): T.royalties =>
  match(Big_map.find_opt(token_id, s.royalties)) {
    when(Some(royalties)): royalties;
    when(None()): s.default_royalties;
  };

export const get_created = (token_id: T.token_id, s: T.storage): timestamp =>
  match(Big_map.find_opt(token_id, s.created)) {
    when(Some(t)): t;
    when(None()): Tezos.get_now();
  };
