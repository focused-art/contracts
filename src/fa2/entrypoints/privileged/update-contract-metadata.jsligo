#import "../../types.jsligo" "T"
#import "../../views.jsligo" "V"
#import "../../helpers.jsligo" "H"
#import "../../../common/utils/address.jsligo" "A"

// Update contract level metadata
export const entrypoint = (input: T.Common.metadata, permit_opt: option<T.Permit.permit>, s1: T.storage): T.@return => {
  let s = s1;

  const sender : address = match(permit_opt) {
    when(Some(permit)): do {
      const param_bytes : bytes = Bytes.pack(["%update_contract_metadata", input]);
      s = H.check_and_store_permit(permit, param_bytes, s);
      return A.address_from_key(permit.signer);
    };
    when(None()): Tezos.get_sender();
  };

  assert_with_error(V.is_owner(sender, s), "FA2_INVALID_OWNER_ACCESS");

  s.metadata = Big_map.empty;
  for (const generated of input) {
    let [key, value] = generated;
    s.metadata = Big_map.add(key, value, s.metadata)
  };

  return [list([]), s]
};
