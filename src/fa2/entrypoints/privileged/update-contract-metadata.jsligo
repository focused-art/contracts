// Update contract level metadata
const update_contract_metadata = (input: metadata, permit_opt: option<permit>, s1: storage): @return => {
  let s = s1;

  const owner : address = match(permit_opt, {
    Some: permit => {
      const param_bytes : bytes = Bytes.pack(["%update_contract_metadata", input]);
      s = check_and_store_permit(permit, param_bytes, s);
      return address_from_key(permit.signer);
    },
    None: () => Tezos.get_sender()
  });

  assert_with_error(is_owner(owner, s), "FA2_INVALID_OWNER_ACCESS");

  s.metadata = Big_map.empty;
  for (const generated of input) {
    let [key, value] = generated;
    s.metadata = Big_map.add(key, value, s.metadata)
  };

  return [list([]), s]
};
