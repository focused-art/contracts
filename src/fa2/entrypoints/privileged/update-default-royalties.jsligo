#import "../../types.jsligo" "T"
#import "../../views.jsligo" "V"
#import "../../helpers.jsligo" "H"
#import "../../../common/utils/address.jsligo" "A"

// Update default token royalties
export const entrypoint = (
  input: T.royalties,
  permit_opt: option<T.Permit.permit>,
  s1: T.storage
): T.@return => {
  let s = s1;

  const sender : address = match(permit_opt) {
    when(Some(permit)): do {
      const param_bytes : bytes = Bytes.pack(["%update_default_royalties", input]);
      s = H.check_and_store_permit(permit, param_bytes, s);
      return A.address_from_key(permit.signer);
    };
    when(None()): Tezos.get_sender();
  };

  assert_with_error(
    V.has_role([sender, Royalties_manager()], s),
    "FA2_INVALID_ROYALTIES_MANAGER_ACCESS"
  );

  s.default_royalties = input;

  return [list([]), s]
};
