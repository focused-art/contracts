#import "../../types.jsligo" "T"
#import "../../views.jsligo" "V"
#import "../../helpers.jsligo" "H"
#import "../../../common/utils/address.jsligo" "A"

// Update token metadata
export const entrypoint = (
  input: T.update_token_metadata_params,
  permit_opt: option<T.Permit.permit>,
  s1: T.storage
): T.@return => {
  let s = s1;

  const sender : address = match(permit_opt) {
    when(Some(permit)): do {
      const param_bytes : bytes = Bytes.pack(["%update_metadata", input]);
      s = H.check_and_store_permit(permit, param_bytes, s);
      return A.address_from_key(permit.signer);
    };
    when(None()): Tezos.get_sender();
  };

  assert_with_error(
    V.has_role([sender, Metadata_manager()], s),
    "FA2_INVALID_METADATA_MANAGER_ACCESS"
  );

  // Initialize operations
  let operations: list<operation> = list([]);

  for (const generated of input) {
    const [token_id, token_info] = generated;
    s.token_metadata = Big_map.update(
      token_id,
      Some({ token_id: token_id; token_info: token_info }),
      s.token_metadata
    );

    // Events
    const token_metadata_update_event: T.token_metadata_update_event =
      { token_id: token_id; new_metadata: Some(token_info) };

    operations = list([
      Tezos.emit("%token_metadata_update", token_metadata_update_event),
      ...operations
    ]);
  };

  // Send hooks
  for (const hook of V.get_hooks(Metadata_hook(), s)) {
    operations = list([
      Tezos.transaction(input, 0mutez, H.get_update_metadata_hook(hook)),
      ...operations
    ]);
  };

  return [operations, s]
};
