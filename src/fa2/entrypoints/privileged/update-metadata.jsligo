// Update token metadata
const update_metadata = (input: update_token_metadata_params, permit_opt: option<permit>, s1: storage): @return => {
  let s = s1;

  const sender : address = match(permit_opt, {
    Some: permit => {
      const param_bytes : bytes = Bytes.pack(["%update_metadata", input]);
      s = check_and_store_permit(permit, param_bytes, s);
      return address_from_key(permit.signer);
    },
    None: () => Tezos.get_sender()
  });

  assert_with_error(
    has_role([sender, Metadata_manager()], s),
    "FA2_INVALID_METADATA_MANAGER_ACCESS"
  );

  // Initialize operations
  let operations: list<operation> = list([]);

  for (const generated of input) {
    const [token_id, token_info] = generated;
    s.token_metadata = Big_map.update(
      token_id,
      Some({ token_id: token_id; token_info: token_info }),
      s.token_metadata
    );

    // Events
    const token_metadata_update_event: token_metadata_update_event =
      { token_id: token_id; new_metadata: Some(token_info) };

    operations = list([
      Tezos.emit("%token_metadata_update", token_metadata_update_event),
      ...operations
    ]);
  };

  // Send hooks
  for (const hook of get_hooks(Metadata_hook(), s)) {
    operations = list([
      Tezos.transaction(input, (0 as mutez), get_update_metadata_hook(hook)),
      ...operations
    ]);
  };

  return [operations, s]
};
