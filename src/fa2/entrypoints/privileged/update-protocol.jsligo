#import "../../types.jsligo" "T"
#import "../../views.jsligo" "V"
#import "../../helpers.jsligo" "H"
#import "../../../common/utils/address.jsligo" "A"

// Update focused art protocol
export const entrypoint = (
  new_protocol: T.Common.trusted,
  permit_opt: option<T.Permit.permit>,
  s1: T.storage
): T.@return => {
  let s = s1;

  const sender : address = match(permit_opt) {
    when(Some(permit)): do {
      const param_bytes : bytes = Bytes.pack(["%update_protocol", new_protocol]);
      s = H.check_and_store_permit(permit, param_bytes, s);
      return A.address_from_key(permit.signer);
    };
    when(None()): Tezos.get_sender();
  };

  assert_with_error(V.is_owner(sender, s), "FA2_INVALID_OWNER_ACCESS");

  const migrate_entrypoint : contract<T.Common.trusted> =
    match(
      Tezos.get_entrypoint_opt("%migrate_to_protocol", s.protocol) as option<contract<T.Common.trusted>>
    ) {
      when(Some(entrypoint)): entrypoint;
      when(None()): failwith("FA_INVALID_PROTCOL_MIGRATION");
    };

  const operations: list<operation> = list([
    Tezos.transaction(new_protocol, 0mutez, migrate_entrypoint)
  ]);

  s.protocol = new_protocol;

  return [operations, s]
};
