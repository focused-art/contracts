// Update focused art protocol
const update_protocol = (new_protocol: trusted, permit_opt: option<permit>, s1: storage): @return => {
  let s = s1;

  const sender : address = match(permit_opt, {
    Some: permit => {
      const param_bytes : bytes = Bytes.pack(["%update_protocol", new_protocol]);
      s = check_and_store_permit(permit, param_bytes, s);
      return address_from_key(permit.signer);
    },
    None: () => Tezos.get_sender()
  });

  assert_with_error(is_owner(sender, s), "FA2_INVALID_OWNER_ACCESS");

  const migrate_entrypoint : contract<trusted> =
    match(
      Tezos.get_entrypoint_opt("%migrate_to_protocol", s.protocol) as option<contract<trusted>>,
      { Some: entrypoint => entrypoint, None: () => failwith("FA_INVALID_PROTCOL_MIGRATION") }
    );

  const operations: list<operation> = list([
    Tezos.transaction(new_protocol, (0 as mutez), migrate_entrypoint)
  ]);

  s.protocol = new_protocol;

  return [operations, s]
};
