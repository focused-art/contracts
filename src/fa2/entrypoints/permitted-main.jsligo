#import "../types.jsligo" "T"
#import "create.jsligo" "Create"
#import "mint.jsligo" "Mint"
#import "burn.jsligo" "Burn"
#import "transfer.jsligo" "Transfer"
#import "update-operators.jsligo" "UpdateOperators"
#import "privileged/update-contract-metadata.jsligo" "UpdateContractMetadata"
#import "privileged/update-metadata.jsligo" "UpdateMetadata"
#import "privileged/update-royalties.jsligo" "UpdateRoyalties"
#import "privileged/update-default-royalties.jsligo" "UpdateDefaultRoyalties"
#import "privileged/update-protocol.jsligo" "UpdateProtocol"

export const entrypoint = (input: T.permitted_params, s: T.storage): T.@return =>
  match(input.action) {

    when(Create()): do {
      const params: T.create_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return Create.entrypoint(params, Some(input.permit), s);
    };

    when(Mint()): do {
      const params: T.mint_burn_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return Mint.entrypoint(params, Some(input.permit), s);
    };

    when(Burn()): do {
      const params: T.mint_burn_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return Burn.entrypoint(params, Some(input.permit), s);
    };

    when(Transfer()): do {
      const params: T.transfer_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return Transfer.entrypoint(params, Some(input.permit), s);
    };

    when(Update_operators()): do {
      const params: T.update_operator_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return UpdateOperators.entrypoint(params, Some(input.permit), s);
    };

    when(Update_contract_metadata()): do {
      const params: T.Common.metadata = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return UpdateContractMetadata.entrypoint(params, Some(input.permit), s);
    };

    when(Update_metadata()): do {
      const params: T.update_token_metadata_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return UpdateMetadata.entrypoint(params, Some(input.permit), s);
    };

    when(Update_royalties()): do {
      const params: T.update_royalties_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return UpdateRoyalties.entrypoint(params, Some(input.permit), s);
    };

    when(Update_default_royalties()): do {
      const params: T.royalties = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return UpdateDefaultRoyalties.entrypoint(params, Some(input.permit), s);
    };

    when(Update_protocol()): do {
      const params: T.Common.trusted = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return UpdateProtocol.entrypoint(params, Some(input.permit), s);
    };

  };
