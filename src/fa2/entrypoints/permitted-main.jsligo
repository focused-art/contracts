const permitted_main = (input: permitted_params, s: storage): @return =>
  match(input.action, {
    Create: () => {
      const params: create_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return create(params, Some(input.permit), s);
    },
    Mint: () => {
      const params: mint_burn_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return mint(params, Some(input.permit), s);
    },
    Burn: () => {
      const params: mint_burn_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return burn(params, Some(input.permit), s);
    },
    Transfer: () => {
      const params: transfer_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return transfer(params, Some(input.permit), s);
    },
    Update_operators: () => {
      const params: update_operator_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return update_operators(params, Some(input.permit), s);
    },
    Update_contract_metadata: () => {
      const params: metadata = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return update_contract_metadata(params, Some(input.permit), s);
    },
    Update_metadata: () => {
      const params: update_token_metadata_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return update_metadata(params, Some(input.permit), s);
    },
    Update_royalties: () => {
      const params: update_royalties_params = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return update_royalties(params, Some(input.permit), s);
    },
    Update_default_royalties: () => {
      const params: royalties = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return update_default_royalties(params, Some(input.permit), s);
    },
    Update_protocol: () => {
      const params: trusted = Option.unopt_with_error(
        Bytes.unpack(input.packed_params),
        "FA_INVALID_PACKED_PARAMS"
      );
      return update_protocol(params, Some(input.permit), s);
    },
  });
