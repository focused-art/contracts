#import "../types.jsligo" "T"
#import "../views.jsligo" "V"
#import "../helpers.jsligo" "H"
#import "../../common/utils/address.jsligo" "A"

export const entrypoint = (
  params: T.update_operator_params,
  permit_opt: option<T.Permit.permit>,
  s1: T.storage
): T.@return => {
  let s = s1;

  const sender : address = match(permit_opt) {
    when(Some(permit)): do {
      const param_bytes : bytes = Bytes.pack(["%update_operators", params]);
      s = H.check_and_store_permit(permit, param_bytes, s);
      return A.address_from_key(permit.signer);
    };
    when(None()): Tezos.get_sender();
  };

  // Initialize operations
  let operations: list<operation> = list([]);

  for (const update_operator_param of params) {
    match(update_operator_param) {
      when(Add_operator(param)): do {
        H.validate_token_id(param.token_id, s);
        assert_with_error(param.owner == sender, "FA2_NOT_OWNER");
        s.operators = Big_map.update(
          [param.owner, [param.operator, param.token_id]],
          Some(unit),
          s.operators
        );

        const operator_update_event: T.operator_update_event = {
          owner: param.owner,
          operator: param.operator,
          token_id: param.token_id,
          is_operator: true
        };

        operations = list([
          Tezos.emit("%operator_update", operator_update_event),
          ...operations
        ]);
      };
      when(Remove_operator(param)): do {
        H.validate_token_id(param.token_id, s);
        assert_with_error(param.owner == sender, "FA2_NOT_OWNER");
        s.operators = Big_map.remove(
          [param.owner, [param.operator, param.token_id]],
          s.operators
        );

        const operator_update_event: T.operator_update_event = {
          owner: param.owner,
          operator: param.operator,
          token_id: param.token_id,
          is_operator: false
        };

        operations = list([
          Tezos.emit("%operator_update", operator_update_event),
          ...operations
        ]);
      };
    };
  };

  return [operations, s]
};
