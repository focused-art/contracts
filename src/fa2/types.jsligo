#import "../common/types.jsligo" "Common"
#import "../common/utils/permit.jsligo" "Permit"

export type trusted = Common.trusted;
export type metadata = Common.metadata;
export type op_list = Common.op_list;

export type token_id = nat;
export type token_ids = set<token_id>;
export type owner = address;
export type operator = address;
export type royalty_shares = map<address, nat>;

export type royalties = {
  total_shares          : nat,
  shares                : royalty_shares
};

export type token_metadata = {
  token_id,
  token_info            : metadata
};

export type transfer_destination = {
  to_                   : address,
  token_id,
  amount                : nat
};

export type transfer_param = {
  from_                 : owner,
  txs                   : list<transfer_destination>
};

export type balance_of_request = {
  owner,
  token_id
};

export type balance_of_response = {
  request               : balance_of_request,
  balance               : nat
};

export type balance_params = {
  requests              : list<balance_of_request>,
  callback              : contract<list<balance_of_response>>
};

export type operator_param = {
  owner,
  operator,
  token_id
};

export type update_operator_param =
  | ["Add_operator", operator_param]
  | ["Remove_operator", operator_param];

export type transfer_params = list<transfer_param>;

export type update_operator_params = list<update_operator_param>;

export type assert_balance_param = {
  owner,
  token_id,
  balance: nat
};

export type assert_balance_params = list<assert_balance_param>;

export type create_params = {
  token_metadata        : metadata,
  max_supply            : nat,
  royalties             : option<royalties>,
  token_id              : option<token_id>
};

export type update_royalties_params = map<token_id, royalties>;

export type update_token_metadata_params = map<token_id, metadata>;

export type mint_burn_params = {
  owner,
  token_id,
  amount: nat
};

// contract storage
export type storage = {
  metadata              : big_map<string, bytes>,
  protocol              : trusted,
  next_token_id         : nat,
  token_total_supply    : big_map<token_id, nat>,
  ledger                : big_map<[owner, token_id], nat>,
  operators             : big_map<[owner, ([operator, token_id])], unit>,
  token_metadata        : big_map<token_id, token_metadata>,
  royalties             : big_map<token_id, royalties>,
  token_max_supply      : big_map<token_id, nat>,
  created               : big_map<token_id, timestamp>,
  default_royalties     : royalties,
  permits               : Permit.used_permits,
  permits_expiry        : Permit.expiring_permits,
};

export type operator_update_event = {
  owner,
  operator,
  token_id,
  is_operator: bool
};

export type transfer_event = {
  from_: owner,
  to_: address,
  token_id,
  amount: nat
};

export type balance_update_event = {
  owner,
  token_id,
  new_balance: nat,
  diff: int
};

export type token_metadata_update_event = {
  token_id,
  new_metadata: option<metadata>
};

export type token_royalties_update_event = {
  token_id,
  new_royalties: option<royalties>
};

export type owner_diff = {
  owner,
  owner_diff: int
};

export type total_supply_update_event = {
  /* @annot */ owner_diffs: list<owner_diff>,
  token_id,
  new_total_supply: nat,
  diff: int
};

// define return type for readability
export type @return = [op_list, storage];

export type privileged_action =
  | ["Update_contract_metadata", metadata]
  | ["Update_metadata", update_token_metadata_params]
  | ["Update_royalties", update_royalties_params]
  | ["Update_default_royalties", royalties]
  | ["Update_protocol", trusted];

export type permitted_action =
  | ["Create"]
  | ["Mint"]
  | ["Burn"]
  | ["Transfer"]
  | ["Update_operators"]
  | ["Update_contract_metadata"]
  | ["Update_metadata"]
  | ["Update_royalties"]
  | ["Update_default_royalties"]
  | ["Update_protocol"];

export type permitted_params = {
  action                : permitted_action,
  packed_params         : bytes,
  permit                : Permit.permit
};

export type entry_action =
  | ["Privileged_action", privileged_action]
  | ["Permitted", permitted_params]
  | ["Transfer", transfer_params]
  | ["Balance_of", balance_params]
  | ["Update_operators", update_operator_params]
  | ["Assert_balances", assert_balance_params]
  | ["Create", create_params]
  | ["Mint", mint_burn_params]
  | ["Burn", mint_burn_params];
