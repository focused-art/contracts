#import "types.jsligo" "T"
#import "../common/utils/permit.jsligo" "Permit"

// Helpers

export const internal_get_token_total_supply = (token_id: T.token_id, s: T.storage): nat =>
  match(Big_map.find_opt(token_id, s.token_total_supply)) {
    when(None()): 0n;
    when(Some(supply)): supply;
  };

export const internal_get_balance_of = (owner: T.owner, token_id: T.token_id, s: T.storage): nat =>
  match(Big_map.find_opt([owner, token_id], s.ledger)) {
    when(None()): 0n;
    when(Some(bal)): bal;
  };

export const internal_is_operator = (owner: T.owner, operator: T.operator, token_id: T.token_id, s: T.storage): bool =>
  owner == operator ||
    Big_map.mem([owner, [operator, token_id]], s.operators);

export const validate_operator = (owner: T.owner, operator: T.operator, token_id: T.token_id, s: T.storage): unit =>
  assert_with_error(
    internal_is_operator(owner, operator, token_id, s) == true,
    "FA2_NOT_OPERATOR"
  );

export const validate_token_id = (token_id: T.token_id, s: T.storage): unit =>
  assert_with_error(token_id < s.next_token_id, "FA2_TOKEN_UNDEFINED");

export const get_transfer_hook = (c: T.Common.trusted): contract<T.transfer_params> =>
  match(
    Tezos.get_entrypoint_opt("%transfer_hook", c) as option<contract<T.transfer_params>>
  ) {
    when(None()): failwith("FA_TRANSFER_HOOK_UNDEFINED");
    when(Some(entrypoint)): entrypoint;
  };

export const get_create_hook = (c: T.Common.trusted): contract<T.create_params> =>
  match(
    Tezos.get_entrypoint_opt("%create_hook", c) as option<contract<T.create_params>>
  ) {
    when(None()): failwith("FA_CREATE_HOOK_UNDEFINED");
    when(Some(entrypoint)): entrypoint;
  };

export const get_burn_hook = (c: T.Common.trusted): contract<T.mint_burn_params> =>
  match(
    Tezos.get_entrypoint_opt("%burn_hook", c) as option<contract<T.mint_burn_params>>
  ) {
    when(None()): failwith("FA_BURN_HOOK_UNDEFINED");
    when(Some(entrypoint)): entrypoint;
  };

export const get_mint_hook = (c: T.Common.trusted): contract<T.mint_burn_params> =>
  match(
    Tezos.get_entrypoint_opt("%mint_hook", c) as option<contract<T.mint_burn_params>>
  ) {
    when(None()): failwith("FA_MINT_HOOK_UNDEFINED");
    when(Some(entrypoint)): entrypoint;
  };

export const get_update_metadata_hook = (c: T.Common.trusted): contract<T.update_token_metadata_params> =>
  match(
    Tezos.get_entrypoint_opt("%update_metadata_hook", c) as option<contract<T.update_token_metadata_params>>
  ) {
    when(None()): failwith("FA_UPDATE_METADATA_HOOK_UNDEFINED");
    when(Some(entrypoint)): entrypoint;
  };

export const get_update_royalties_hook = (c: T.Common.trusted): contract<T.update_royalties_params> =>
  match(
    Tezos.get_entrypoint_opt("%update_royalties_hook", c) as option<contract<T.update_royalties_params>>
  ) {
    when(None()): failwith("FA_UPDATE_ROYALTIES_HOOK_UNDEFINED");
    when(Some(entrypoint)): entrypoint;
  };

export const check_and_store_permit = (permit: Permit.permit, param_bytes: bytes, s: T.storage): T.storage => {
  const [permits, permits_expiry] = Permit.check_permit(permit, param_bytes, [s.permits, s.permits_expiry]);
  return { ...s, permits, permits_expiry };
};
